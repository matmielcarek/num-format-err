{"ast":null,"code":"import React from'react';// Object imported from React module\nimport ReactDOM from'react-dom';// Object imported from React module\n// import './index.css'; // Import basic css\nimport App from'./App';// Import main (root) component\nimport reportWebVitals from'./reportWebVitals';import'bootstrap/dist/css/bootstrap.css';// Importing bootstrap css\nimport'bulma/css/bulma.css';// Importing bootstrap css\nimport{jsx as _jsx}from\"react/jsx-runtime\";ReactDOM.render(/*#__PURE__*/_jsx(App,{}),document.getElementById('root'));// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();//[INTRO]\n// Base of React library are COMPONENTS - separate pieces of user interface - reusable, independent, isolated.\n// App - root component, then child components.\n// React is only a library, not framework as Angular. It only renders the elements, but no ready components are available.\n// One still need to use bootstrap or other framework to create UI.\n//[COMPONENT]\n// Component is a JavaScript class that has some STATE and RENDER METHOD.\n// State is data that we want to display when the component is rendered.\n// Render method derscribes what the UI should look like. Output of the render method is \"virtual\" DOM - lightweight, in memory, cheap to create.\n// React compares virtual DOM with old version of the virtual DOM and changes only the DOM elements that were changed.\n// In components we use JSX, that is compiled by Babel to plain js (React) code.\n//[START]\n// To create basic React app - in directory: <create-react-app app-name> - it includes:\n//-> Development Server\n//-> Webpack\n//-> Babel - JS compiler - from JSX (JavaScript XML) to plain JS\n//-> Other tools\n// To start the server: <npm start>\n//[SHORTCUTS]\n//->imrc - import react component\n//->cc - create class\n//[THIS]\n// \"This\" behaves differently, depending on where it is called it can reference different objects.\n// If \"This\" is called as part of a method in an object, \"This\" will return reference to that object.\n// If function is called as standalone function, without object reference, \"This\" by default returns reference to window object.\n//[RAISING EVENTS]\n// The component that owns a piece od the state, should be the one modifying it.\n// List of counters is part of counters component. Adding and removin shall be done by counters component.\n// But, the state is private to the component! So, Counter shall raise the event and counters component will handle this event.\n// Pass a reference to a method owned by counters component in the counter component via props.\n// In Counters component, where we render counter, we add a prop (event) (i.e. \"onDelete={this.handleDelete)\".\n// In Counter component we refer to a prop: \"this.props.onDelete\".","map":{"version":3,"sources":["/Users/Mateusz/Documents/Kodowanie/public_html/en/mat/wp-content/reactpress/apps/num-format-err/src/index.js"],"names":["React","ReactDOM","App","reportWebVitals","render","document","getElementById"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAA2B;AAC3B,MAAOC,CAAAA,QAAP,KAAqB,WAArB,CAAkC;AAClC;AACA,MAAOC,CAAAA,GAAP,KAAgB,OAAhB,CAAyB;AACzB,MAAOC,CAAAA,eAAP,KAA4B,mBAA5B,CACA,MAAO,kCAAP,CAA2C;AAC3C,MAAO,qBAAP,CAA8B;2CAG9BF,QAAQ,CAACG,MAAT,cACI,KAAC,GAAD,IADJ,CAEEC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAFF,EAKA;AACA;AACA;AACAH,eAAe,GAEf;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from 'react'; // Object imported from React module\nimport ReactDOM from 'react-dom'; // Object imported from React module\n// import './index.css'; // Import basic css\nimport App from './App'; // Import main (root) component\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css'; // Importing bootstrap css\nimport 'bulma/css/bulma.css'; // Importing bootstrap css\n\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n//[INTRO]\n\n// Base of React library are COMPONENTS - separate pieces of user interface - reusable, independent, isolated.\n// App - root component, then child components.\n// React is only a library, not framework as Angular. It only renders the elements, but no ready components are available.\n// One still need to use bootstrap or other framework to create UI.\n\n//[COMPONENT]\n\n// Component is a JavaScript class that has some STATE and RENDER METHOD.\n// State is data that we want to display when the component is rendered.\n// Render method derscribes what the UI should look like. Output of the render method is \"virtual\" DOM - lightweight, in memory, cheap to create.\n// React compares virtual DOM with old version of the virtual DOM and changes only the DOM elements that were changed.\n// In components we use JSX, that is compiled by Babel to plain js (React) code.\n\n//[START]\n\n// To create basic React app - in directory: <create-react-app app-name> - it includes:\n//-> Development Server\n//-> Webpack\n//-> Babel - JS compiler - from JSX (JavaScript XML) to plain JS\n//-> Other tools\n// To start the server: <npm start>\n\n//[SHORTCUTS]\n\n//->imrc - import react component\n//->cc - create class\n\n//[THIS]\n\n// \"This\" behaves differently, depending on where it is called it can reference different objects.\n// If \"This\" is called as part of a method in an object, \"This\" will return reference to that object.\n// If function is called as standalone function, without object reference, \"This\" by default returns reference to window object.\n\n//[RAISING EVENTS]\n\n// The component that owns a piece od the state, should be the one modifying it.\n// List of counters is part of counters component. Adding and removin shall be done by counters component.\n// But, the state is private to the component! So, Counter shall raise the event and counters component will handle this event.\n// Pass a reference to a method owned by counters component in the counter component via props.\n// In Counters component, where we render counter, we add a prop (event) (i.e. \"onDelete={this.handleDelete)\".\n// In Counter component we refer to a prop: \"this.props.onDelete\".\n"]},"metadata":{},"sourceType":"module"}