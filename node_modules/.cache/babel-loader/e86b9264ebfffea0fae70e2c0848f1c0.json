{"ast":null,"code":"import _objectSpread from\"/Users/mateuszmielcarek/Documents/public_html/en/mat/wp-content/reactpress/apps/counter-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _toConsumableArray from\"/Users/mateuszmielcarek/Documents/public_html/en/mat/wp-content/reactpress/apps/counter-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _classCallCheck from\"/Users/mateuszmielcarek/Documents/public_html/en/mat/wp-content/reactpress/apps/counter-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/mateuszmielcarek/Documents/public_html/en/mat/wp-content/reactpress/apps/counter-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/mateuszmielcarek/Documents/public_html/en/mat/wp-content/reactpress/apps/counter-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/mateuszmielcarek/Documents/public_html/en/mat/wp-content/reactpress/apps/counter-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from'react';import NavBar from'./components/navbar';import'./App.css';import Counters from'./components/counters';//Now we want to exchange data between two child components: Counters and Navbar (to display number of items)\n// There is no parent-child relationship between the two\n//We need to raise the state of Counters component up to App\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var App=/*#__PURE__*/function(_Component){_inherits(App,_Component);var _super=_createSuper(App);function App(){var _this;_classCallCheck(this,App);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state={counters:[{id:1,value:4},{id:2,value:0},{id:3,value:0},{id:4,value:0}]};_this.handleIncrement=function(counter){// this.state.count++; // we cannot change value of count directly like this - React will not be aware that it changed\nvar counters=_toConsumableArray(_this.state.counters);// ... is cloning array of counters from state to var \"counters\"\nvar index=counters.indexOf(counter);// find index of counter within counters (in state)\ncounters[index]=_objectSpread({},counter);//to clone the counter at exact location - counter object in state remains unchanged\ncounters[index].value++;_this.setState({counters:counters});//update state\n};_this.handleDecrement=function(counter){// this.state.count++; // we cannot change value of count directly like this - React will not be aware that it changed\nvar counters=_toConsumableArray(_this.state.counters);// ... is cloning array of counters from state to var \"counters\"\nvar index=counters.indexOf(counter);// find index of counter within counters (in state)\ncounters[index]=_objectSpread({},counter);//to clone the counter at exact location - counter object in state remains unchanged\ncounters[index].value-=counters[index].value>0?1:0;// counters[index].value === 0 ? counters[index].value-- : counters[index].value;\n// classes += this.props.counter.value === 0 ? \"warning\" : \"primary\";\n_this.setState({counters:counters});//update state\n};_this.handleDelete=function(counterId){// console.log(\"Delete event handled.\", counterId);\nvar counters=_this.state.counters.filter(function(c){return c.id!==counterId;});//We do not remove the counter from state - we only make a new array after the event.\n_this.setState({counters:counters});};_this.handleReset=function(){var counters=_this.state.counters.map(function(c){c.value=0;return c;});_this.setState({counters:counters});};return _this;}_createClass(App,[{key:\"render\",value:function render(){return/*#__PURE__*/_jsxs(React.Fragment,{children:[/*#__PURE__*/_jsx(NavBar,{totalCounters:this.state.counters.filter(function(c){return c.value>0;}).length}),/*#__PURE__*/_jsx(\"main\",{className:\"container\",children:/*#__PURE__*/_jsx(Counters,{counters:this.state.counters// Instead of passing each prop separately, we pass the whole counters object.\n,onReset:this.handleReset,onIncrement:this.handleIncrement,onDecrement:this.handleDecrement,onDelete:this.handleDelete})})]});}}]);return App;}(Component);export default App;","map":{"version":3,"sources":["/Users/mateuszmielcarek/Documents/public_html/en/mat/wp-content/reactpress/apps/counter-app/src/App.js"],"names":["React","Component","NavBar","Counters","App","state","counters","id","value","handleIncrement","counter","index","indexOf","setState","handleDecrement","handleDelete","counterId","filter","c","handleReset","map","length"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport NavBar from './components/navbar';\nimport './App.css';\nimport Counters from './components/counters';\n\n//Now we want to exchange data between two child components: Counters and Navbar (to display number of items)\n// There is no parent-child relationship between the two\n//We need to raise the state of Counters component up to App\n\nclass App extends Component {\n\n  state = {\n    counters: [\n      { id: 1, value: 4 },\n      { id: 2, value: 0 },\n      { id: 3, value: 0 },\n      { id: 4, value: 0 },\n    ],\n  };\n\n  handleIncrement = (counter) => {\n    // this.state.count++; // we cannot change value of count directly like this - React will not be aware that it changed\n    const counters = [...this.state.counters]; // ... is cloning array of counters from state to var \"counters\"\n    const index = counters.indexOf(counter); // find index of counter within counters (in state)\n    counters[index] = { ...counter }; //to clone the counter at exact location - counter object in state remains unchanged\n    counters[index].value++;\n    this.setState({ counters }); //update state\n  };\n\n  handleDecrement = (counter) => {\n    // this.state.count++; // we cannot change value of count directly like this - React will not be aware that it changed\n    const counters = [...this.state.counters]; // ... is cloning array of counters from state to var \"counters\"\n    const index = counters.indexOf(counter); // find index of counter within counters (in state)\n    counters[index] = { ...counter }; //to clone the counter at exact location - counter object in state remains unchanged\n    counters[index].value -= counters[index].value>0 ? 1: 0;\n    // counters[index].value === 0 ? counters[index].value-- : counters[index].value;\n    // classes += this.props.counter.value === 0 ? \"warning\" : \"primary\";\n    this.setState({ counters }); //update state\n  };\n\n  handleDelete = (counterId) => {\n    // console.log(\"Delete event handled.\", counterId);\n    const counters = this.state.counters.filter((c) => c.id !== counterId); //We do not remove the counter from state - we only make a new array after the event.\n    this.setState({ counters });\n  };\n\n  handleReset = () => {\n    const counters = this.state.counters.map((c) => {\n      c.value = 0;\n      return c;\n    });\n    this.setState({ counters });\n  };\n\n  render(){\n    return (\n      <React.Fragment>\n        <NavBar totalCounters={this.state.counters.filter(c => c.value>0).length}></NavBar>\n        <main className=\"container\">\n          <Counters\n            counters = {this.state.counters} // Instead of passing each prop separately, we pass the whole counters object.\n            onReset = {this.handleReset}\n            onIncrement = {this.handleIncrement}\n            onDecrement = {this.handleDecrement}\n            onDelete = {this.handleDelete}\n          />\n        </main>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}