{"ast":null,"code":"var _jsxFileName = \"/Users/mateuszmielcarek/Documents/public_html/en/mat/wp-content/reactpress/apps/num-format-err/src/components/counter.jsx\";\nimport React, { Component } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Counter extends React.Component {\n  ///////////////////////////////////////////////////////////\n  //[LOCAL STATE OF COMPONENT - WHEN NOT INTENDED TO BE MODIFIED]\n  //   state = { //local state- cannot be updated do \"Reset\" does not work.\n  //     //state includes data that is local or private to the component\n  //     //other components cannot access to that state\n  //     //component may not have state, it may take all the data from props\n  //     value: this.props.counter.value,\n  //     //props includes data that we give to the component\n  //     //props is read-only - we cannot assign to the value of the object\n  //     //to modiufy something we need to reach the state\n  //     //!! The component that owns a piece of the state, should be the one modifying it!!\n  //     //!! So, in this case the Counters component owns the state \"counters\" so it should modify it!!\n  //     // Cut, the state is private to the component, so how to modity it with another (Counter) component?\n  //     // Counter component will raise the event\n  //   };\n  ///////////////////////////////////////////////////////////\n  //   //[RENDERING LIST OF COMPONENTS (TAGS)]\n  //   state = {\n  //     tags: [\"tag1\", \"tag2\", \"tag3\"],\n  //   };\n  //     renderTags() {\n  //       if (this.state.tags.length === 0) return <p>There are no tags!</p>;\n  //       return (\n  //         <ul>\n  //           {this.state.tags.map((tag) => (\n  //             <li key={tag}>{tag}</li>\n  //           ))}\n  //         </ul>\n  //       );\n  //     }\n  ///////////////////////////////////////////////////////////\n  //   //[RENDERING LIST OF COMPONENTS (TAGS)]\n  //   constructor() {\n  //     super(); //to have the\n  //     this.handleIncrement = this.handleIncrement.bind(this);\n  //   }\n  //Functions in javaScript are objects so they have objects and methods.\n  //Above is done to get access to the Counter object in function.\n  //We will be able to update \"state\" property.\n  //Solution to bind event handlers to \"This\"\n  //There is another way of doing this:\n  //   handleIncrement() {\n  //     console.log(\"Increment clicked\", this);\n  //   }\n  ///////////////////////////////////////////////////////////\n  //   //[CONTROLLED COMPONENT]\n  //Component is controlled by its parent - no local state should exist!\n  //Same in Counters component.\n  //onSubmit={this.handleSubmit}\n  // Render method\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-sm-4\",\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Number to format:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 63,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                placeholder: \"1.23E+3 or 1230\",\n                class: \"form-control\" // value={this.state.value}\n                // onChange={this.handleChange}\n\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 64,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n                className: \"form-text text-muted\",\n                children: \"Use dot [.] or comma [,] as a decimal separator.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 71,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Formatted number:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 76,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                class: \"form-control\" // value={this.state.value}\n                // onChange={this.handleChange}\n                ,\n                readOnly: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 77,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-sm-2\",\n          children: [/*#__PURE__*/_jsxDEV(\"form\", {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Rel. error:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 90,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                placeholder: \"1.23E+3 or 1230\",\n                class: \"form-control\" // value={this.state.value}\n                // onChange={this.handleChange}\n\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 91,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Abs. error:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 100,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                class: \"form-control\" // value={this.state.value}\n                // onChange={this.handleChange}\n                ,\n                readOnly: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 101,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: this.getBadgeClasses(),\n            children: this.formatCount()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"btn-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              //   onClick={() => this.handleIncrement(product)} // passing arguments to event handlers - pass arrow function to event identifier\n              onClick: () => {\n                this.props.onIncrement(this.props.counter); // This is here instead of the local state. Parent controls the component.\n              },\n              className: \"btn btn-secondary btn-sm col-3 me-2\",\n              children: \"+\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => {\n                this.props.onDecrement(this.props.counter);\n              },\n              className: \"btn btn-secondary btn-sm col-3\",\n              children: \"-\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => this.props.onDelete(this.props.counter.id) //onDelete is a property of Counter component called in Counters component.\n            // Here only the property onDelete of the counter, defined in counters component is called - <raising event handlers>\n            // The reference must be given as an arrow function, as we need to pass an id of the counter to be deleted.\n            // If instead of \"this.props.counter.id\" we would add 1, always counter of id 1 would be deleted.\n            ,\n            className: \"btn btn-danger btn-sm m-2\",\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 13\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this);\n  } // Method to change badge classes based on value of the counter.\n\n\n  getBadgeClasses() {\n    let classes = \"badge m-2 bg-\";\n    classes += this.props.counter.value === 0 ? \"warning\" : \"primary\"; // If counter value is 0 add \"Warning\", else add \"primary\".\n\n    return classes;\n  } // Method to format counter based on value.\n\n\n  formatCount() {\n    // Object destructuring - picking a single property of an object and store it in a const.\n    const {\n      value: value\n    } = this.props.counter;\n    return value === 0 ? \"Zero\" : value; // Instead of plain text \"Zero\" it is also possible to return a JSX expression: <h1>Zero</h1>.\n    // Constant (const) can also store JSX expression. const x = <h1>Zero</h1>\n  } ///////////////////////////////////////////////////////////\n  //   //[USAGE OF <componentDidMount>]\n  //   // Called after component is rendered into the DOM. Place to call data form the server.\n  //   componentDidMount() {\n  // //Ajax Call\n  //     this.setState({data from the server})\n  //   }\n\n\n}\n\nexport default Counter;","map":{"version":3,"sources":["/Users/mateuszmielcarek/Documents/public_html/en/mat/wp-content/reactpress/apps/num-format-err/src/components/counter.jsx"],"names":["React","Component","Counter","render","getBadgeClasses","formatCount","props","onIncrement","counter","onDecrement","onDelete","id","classes","value"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;AAEA,MAAMC,OAAN,SAAsBF,KAAK,CAACC,SAA5B,CAAsC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACAE,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA,gCACE;AAAK,UAAA,SAAS,EAAC,UAAf;AAAA,iCACE;AAAA,oCACE;AAAK,cAAA,SAAS,EAAC,YAAf;AAAA,sCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,eAEE;AACE,gBAAA,IAAI,EAAC,MADP;AAEE,gBAAA,WAAW,EAAC,iBAFd;AAGE,gBAAA,KAAK,EAAC,cAHR,CAIE;AACA;;AALF;AAAA;AAAA;AAAA;AAAA,sBAFF,eASE;AAAO,gBAAA,SAAS,EAAC,sBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBATF;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAcE;AAAK,cAAA,SAAS,EAAC,YAAf;AAAA,sCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,eAEE;AACE,gBAAA,IAAI,EAAC,MADP;AAEE,gBAAA,KAAK,EAAC,cAFR,CAGE;AACA;AAJF;AAKE,gBAAA,QAAQ;AALV;AAAA;AAAA;AAAA;AAAA,sBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,oBAdF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF,eA4BE;AAAK,UAAA,SAAS,EAAC,UAAf;AAAA,kCACE;AAAA,oCACE;AAAK,cAAA,SAAS,EAAC,YAAf;AAAA,sCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,eAEE;AACE,gBAAA,IAAI,EAAC,MADP;AAEE,gBAAA,WAAW,EAAC,iBAFd;AAGE,gBAAA,KAAK,EAAC,cAHR,CAIE;AACA;;AALF;AAAA;AAAA;AAAA;AAAA,sBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAWE;AAAK,cAAA,SAAS,EAAC,YAAf;AAAA,sCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,eAEE;AACE,gBAAA,IAAI,EAAC,MADP;AAEE,gBAAA,KAAK,EAAC,cAFR,CAGE;AACA;AAJF;AAKE,gBAAA,QAAQ;AALV;AAAA;AAAA;AAAA;AAAA,sBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,oBAXF;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAuBE;AAAM,YAAA,SAAS,EAAE,KAAKC,eAAL,EAAjB;AAAA,sBAEG,KAAKC,WAAL;AAFH;AAAA;AAAA;AAAA;AAAA,kBAvBF,eA2BE;AAAK,YAAA,SAAS,EAAC,WAAf;AAAA,oCACE;AACE;AACA,cAAA,OAAO,EAAE,MAAM;AACb,qBAAKC,KAAL,CAAWC,WAAX,CAAuB,KAAKD,KAAL,CAAWE,OAAlC,EADa,CAC+B;AAC7C,eAJH;AAKE,cAAA,SAAS,EAAC,qCALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAUE;AACE,cAAA,OAAO,EAAE,MAAM;AACb,qBAAKF,KAAL,CAAWG,WAAX,CAAuB,KAAKH,KAAL,CAAWE,OAAlC;AACD,eAHH;AAIE,cAAA,SAAS,EAAC,gCAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAVF;AAAA;AAAA;AAAA;AAAA;AAAA,kBA3BF,eA8CE;AACE,YAAA,OAAO,EAAE,MAAM,KAAKF,KAAL,CAAWI,QAAX,CAAoB,KAAKJ,KAAL,CAAWE,OAAX,CAAmBG,EAAvC,CADjB,CAC6D;AAC3D;AACA;AACA;AAJF;AAKE,YAAA,SAAS,EAAC,2BALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBA9CF,EAuDuE,GAvDvE;AAAA;AAAA;AAAA;AAAA;AAAA,gBA5BF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AA4FD,GAlJmC,CAoJpC;;;AACAP,EAAAA,eAAe,GAAG;AAChB,QAAIQ,OAAO,GAAG,eAAd;AACAA,IAAAA,OAAO,IAAI,KAAKN,KAAL,CAAWE,OAAX,CAAmBK,KAAnB,KAA6B,CAA7B,GAAiC,SAAjC,GAA6C,SAAxD,CAFgB,CAEmD;;AACnE,WAAOD,OAAP;AACD,GAzJmC,CA2JpC;;;AACAP,EAAAA,WAAW,GAAG;AACZ;AACA,UAAM;AAAEQ,MAAAA,KAAK,EAAEA;AAAT,QAAmB,KAAKP,KAAL,CAAWE,OAApC;AACA,WAAOK,KAAK,KAAK,CAAV,GAAc,MAAd,GAAuBA,KAA9B,CAHY,CAGyB;AACrC;AACD,GAjKmC,CAmKpC;AACA;AACA;AACA;AACA;AACA;AACA;;;AAzKoC;;AA4KtC,eAAeX,OAAf","sourcesContent":["import React, { Component } from \"react\";\n\nclass Counter extends React.Component {\n  ///////////////////////////////////////////////////////////\n  //[LOCAL STATE OF COMPONENT - WHEN NOT INTENDED TO BE MODIFIED]\n  //   state = { //local state- cannot be updated do \"Reset\" does not work.\n  //     //state includes data that is local or private to the component\n  //     //other components cannot access to that state\n  //     //component may not have state, it may take all the data from props\n  //     value: this.props.counter.value,\n  //     //props includes data that we give to the component\n  //     //props is read-only - we cannot assign to the value of the object\n  //     //to modiufy something we need to reach the state\n\n  //     //!! The component that owns a piece of the state, should be the one modifying it!!\n  //     //!! So, in this case the Counters component owns the state \"counters\" so it should modify it!!\n  //     // Cut, the state is private to the component, so how to modity it with another (Counter) component?\n  //     // Counter component will raise the event\n  //   };\n  ///////////////////////////////////////////////////////////\n  //   //[RENDERING LIST OF COMPONENTS (TAGS)]\n  //   state = {\n  //     tags: [\"tag1\", \"tag2\", \"tag3\"],\n  //   };\n  //     renderTags() {\n  //       if (this.state.tags.length === 0) return <p>There are no tags!</p>;\n  //       return (\n  //         <ul>\n  //           {this.state.tags.map((tag) => (\n  //             <li key={tag}>{tag}</li>\n  //           ))}\n  //         </ul>\n  //       );\n  //     }\n  ///////////////////////////////////////////////////////////\n  //   //[RENDERING LIST OF COMPONENTS (TAGS)]\n  //   constructor() {\n  //     super(); //to have the\n  //     this.handleIncrement = this.handleIncrement.bind(this);\n  //   }\n  //Functions in javaScript are objects so they have objects and methods.\n  //Above is done to get access to the Counter object in function.\n  //We will be able to update \"state\" property.\n  //Solution to bind event handlers to \"This\"\n  //There is another way of doing this:\n  //   handleIncrement() {\n  //     console.log(\"Increment clicked\", this);\n  //   }\n  ///////////////////////////////////////////////////////////\n  //   //[CONTROLLED COMPONENT]\n  //Component is controlled by its parent - no local state should exist!\n  //Same in Counters component.\n\n  //onSubmit={this.handleSubmit}\n  // Render method\n  render() {\n    return (\n      <div className=\"Container\">\n        <div className=\"row\">\n          <div className=\"col-sm-4\">\n            <form>\n              <div className=\"form-group\">\n                <label>Number to format:</label>\n                <input\n                  type=\"text\"\n                  placeholder=\"1.23E+3 or 1230\"\n                  class=\"form-control\"\n                  // value={this.state.value}\n                  // onChange={this.handleChange}\n                />\n                <small className=\"form-text text-muted\">\n                  Use dot [.] or comma [,] as a decimal separator.\n                </small>\n              </div>\n              <div className=\"form-group\">\n                <label>Formatted number:</label>\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  // value={this.state.value}\n                  // onChange={this.handleChange}\n                  readOnly\n                />\n              </div>\n            </form>\n          </div>\n          <div className=\"col-sm-2\">\n            <form>\n              <div className=\"form-group\">\n                <label>Rel. error:</label>\n                <input\n                  type=\"text\"\n                  placeholder=\"1.23E+3 or 1230\"\n                  class=\"form-control\"\n                  // value={this.state.value}\n                  // onChange={this.handleChange}\n                />\n              </div>\n              <div className=\"form-group\">\n                <label>Abs. error:</label>\n                <input\n                  type=\"text\"\n                  class=\"form-control\"\n                  // value={this.state.value}\n                  // onChange={this.handleChange}\n                  readOnly\n                />\n              </div>\n            </form>\n            <span className={this.getBadgeClasses()}>\n              {/* Could also add style=\"some style\" */}\n              {this.formatCount()}\n            </span>\n            <div className=\"btn-group\">\n              <button\n                //   onClick={() => this.handleIncrement(product)} // passing arguments to event handlers - pass arrow function to event identifier\n                onClick={() => {\n                  this.props.onIncrement(this.props.counter); // This is here instead of the local state. Parent controls the component.\n                }}\n                className=\"btn btn-secondary btn-sm col-3 me-2\"\n              >\n                +\n              </button>\n              <button\n                onClick={() => {\n                  this.props.onDecrement(this.props.counter);\n                }}\n                className=\"btn btn-secondary btn-sm col-3\"\n              >\n                -\n              </button>\n            </div>\n            <button\n              onClick={() => this.props.onDelete(this.props.counter.id)} //onDelete is a property of Counter component called in Counters component.\n              // Here only the property onDelete of the counter, defined in counters component is called - <raising event handlers>\n              // The reference must be given as an arrow function, as we need to pass an id of the counter to be deleted.\n              // If instead of \"this.props.counter.id\" we would add 1, always counter of id 1 would be deleted.\n              className=\"btn btn-danger btn-sm m-2\"\n            >\n              Delete\n            </button>\n            {/* {this.state.tags.length === 0 && \"please create a new tag!\"} */}{\" \"}\n            {/* Simplified if else statement with &&*/}\n            {/* {this.renderTags()} */}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // Method to change badge classes based on value of the counter.\n  getBadgeClasses() {\n    let classes = \"badge m-2 bg-\";\n    classes += this.props.counter.value === 0 ? \"warning\" : \"primary\"; // If counter value is 0 add \"Warning\", else add \"primary\".\n    return classes;\n  }\n\n  // Method to format counter based on value.\n  formatCount() {\n    // Object destructuring - picking a single property of an object and store it in a const.\n    const { value: value } = this.props.counter;\n    return value === 0 ? \"Zero\" : value; // Instead of plain text \"Zero\" it is also possible to return a JSX expression: <h1>Zero</h1>.\n    // Constant (const) can also store JSX expression. const x = <h1>Zero</h1>\n  }\n\n  ///////////////////////////////////////////////////////////\n  //   //[USAGE OF <componentDidMount>]\n  //   // Called after component is rendered into the DOM. Place to call data form the server.\n  //   componentDidMount() {\n  // //Ajax Call\n  //     this.setState({data from the server})\n  //   }\n}\n\nexport default Counter;\n"]},"metadata":{},"sourceType":"module"}