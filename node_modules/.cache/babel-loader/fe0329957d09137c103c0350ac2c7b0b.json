{"ast":null,"code":"var _jsxFileName = \"/Users/mateuszmielcarek/counter-app/src/components/counter.jsx\";\nimport React, { Component } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Counter extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      //state includes data that is local or private to the component\n      //other components cannot access to that state\n      //component may not have state, it may take all the data from props\n      value: this.props.value //props includes data that we give to the component\n      //props is read-only - we cannot assign to the value of the object\n      //to modiufy something we need to reach the state\n      // tags: [\"tag1\", \"tag2\", \"tag3\"],\n\n    };\n\n    this.handleIncrement = product => {\n      console.log(product); // console.log(\"Increment clicked\", this);\n      // this.state.count++; // we cannot change value of count directly like this - React will not be aware that it changed\n\n      this.setState({\n        value: this.state.value + 1\n      });\n    };\n  }\n\n  //using an arrow function is cleaner solution\n  //   doHandleIncrement = () => {\n  //     this.handleIncrement({ id: 1 });\n  //   };\n  render() {\n    // console.log(\"props\", this.props);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: this.getBadgeClasses(),\n        children: this.formatCount()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        //   onClick={() => this.handleIncrement(product)} // passing arguments to event handlers - pass arrow function to event identifier\n        onClick: () => {\n          this.handleIncrement({\n            id: 1\n          });\n        },\n        className: \"btn btn-secondary btn-sm\",\n        children: \"Increment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        ClassName: \"btn btn-danger btn-sm m-2\",\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this);\n  }\n\n  getBadgeClasses() {\n    let classes = \"badge m-2 bg-\";\n    classes += this.state.value === 0 ? \"warning\" : \"primary\";\n    return classes;\n  }\n\n  formatCount() {\n    const {\n      value: count\n    } = this.state;\n    return count === 0 ? \"Zero\" : count;\n  }\n\n}\n\nexport default Counter;","map":{"version":3,"sources":["/Users/mateuszmielcarek/counter-app/src/components/counter.jsx"],"names":["React","Component","Counter","state","value","props","handleIncrement","product","console","log","setState","render","getBadgeClasses","formatCount","id","classes","count"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;AAEA,MAAMC,OAAN,SAAsBF,KAAK,CAACC,SAA5B,CAAsC;AAAA;AAAA;AAAA,SACpCE,KADoC,GAC5B;AACN;AACA;AACA;AACAC,MAAAA,KAAK,EAAE,KAAKC,KAAL,CAAWD,KAJZ,CAKN;AACA;AACA;AACA;;AARM,KAD4B;;AAAA,SAoCpCE,eApCoC,GAoCjBC,OAAD,IAAa;AAC7BC,MAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ,EAD6B,CAE7B;AACA;;AACA,WAAKG,QAAL,CAAc;AAAEN,QAAAA,KAAK,EAAE,KAAKD,KAAL,CAAWC,KAAX,GAAmB;AAA5B,OAAd;AACD,KAzCmC;AAAA;;AA0CpC;AAEA;AACA;AACA;AAEAO,EAAAA,MAAM,GAAG;AACP;AACA,wBACE;AAAA,8BAGE;AAAM,QAAA,SAAS,EAAE,KAAKC,eAAL,EAAjB;AAAA,kBAA0C,KAAKC,WAAL;AAA1C;AAAA;AAAA;AAAA;AAAA,cAHF,eAIE;AACE;AACA,QAAA,OAAO,EAAE,MAAM;AACb,eAAKP,eAAL,CAAqB;AAAEQ,YAAAA,EAAE,EAAE;AAAN,WAArB;AACD,SAJH;AAKE,QAAA,SAAS,EAAC,0BALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF,eAaE;AAAQ,QAAA,SAAS,EAAC,2BAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAbF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAmBD;;AAEDF,EAAAA,eAAe,GAAG;AAChB,QAAIG,OAAO,GAAG,eAAd;AACAA,IAAAA,OAAO,IAAI,KAAKZ,KAAL,CAAWC,KAAX,KAAqB,CAArB,GAAyB,SAAzB,GAAqC,SAAhD;AACA,WAAOW,OAAP;AACD;;AAEDF,EAAAA,WAAW,GAAG;AACZ,UAAM;AAAET,MAAAA,KAAK,EAAEY;AAAT,QAAmB,KAAKb,KAA9B;AACA,WAAOa,KAAK,KAAK,CAAV,GAAc,MAAd,GAAuBA,KAA9B;AACD;;AAhFmC;;AAmFtC,eAAed,OAAf","sourcesContent":["import React, { Component } from \"react\";\n\nclass Counter extends React.Component {\n  state = {\n    //state includes data that is local or private to the component\n    //other components cannot access to that state\n    //component may not have state, it may take all the data from props\n    value: this.props.value,\n    //props includes data that we give to the component\n    //props is read-only - we cannot assign to the value of the object\n    //to modiufy something we need to reach the state\n    // tags: [\"tag1\", \"tag2\", \"tag3\"],\n  };\n\n  //   renderTags() {\n  //     if (this.state.tags.length === 0) return <p>There are no tags!</p>;\n  //     return (\n  //       <ul>\n  //         {this.state.tags.map((tag) => (\n  //           <li key={tag}>{tag}</li>\n  //         ))}\n  //       </ul>\n  //     );\n  //   }\n\n  //   constructor() {\n  //     super(); //to have the\n  //     this.handleIncrement = this.handleIncrement.bind(this);\n  //   }\n  //Functions in javaScript are objects so they have objects and methods.\n  //Above is done to get access to the Counter object in function.\n  //We will be able to update \"state\" property.\n  //Solution to bind event handlers to \"This\"\n  //There is another way of doing this:\n  //   handleIncrement() {\n  //     console.log(\"Increment clicked\", this);\n  //   }\n\n  handleIncrement = (product) => {\n    console.log(product);\n    // console.log(\"Increment clicked\", this);\n    // this.state.count++; // we cannot change value of count directly like this - React will not be aware that it changed\n    this.setState({ value: this.state.value + 1 });\n  };\n  //using an arrow function is cleaner solution\n\n  //   doHandleIncrement = () => {\n  //     this.handleIncrement({ id: 1 });\n  //   };\n\n  render() {\n    // console.log(\"props\", this.props);\n    return (\n      <div>\n        {/* <h4>{this.props.id}</h4> //this is how to render some complex elements to Counter, the child of the Counters component\n        {this.props.children} */}\n        <span className={this.getBadgeClasses()}>{this.formatCount()}</span>\n        <button\n          //   onClick={() => this.handleIncrement(product)} // passing arguments to event handlers - pass arrow function to event identifier\n          onClick={() => {\n            this.handleIncrement({ id: 1 });\n          }}\n          className=\"btn btn-secondary btn-sm\"\n        >\n          Increment\n        </button>\n        <button ClassName=\"btn btn-danger btn-sm m-2\">Delete</button>\n        {/* {this.state.tags.length === 0 && \"please create a new tag!\"} */}\n        {/* {this.renderTags()} */}\n      </div>\n    );\n  }\n\n  getBadgeClasses() {\n    let classes = \"badge m-2 bg-\";\n    classes += this.state.value === 0 ? \"warning\" : \"primary\";\n    return classes;\n  }\n\n  formatCount() {\n    const { value: count } = this.state;\n    return count === 0 ? \"Zero\" : count;\n  }\n}\n\nexport default Counter;\n"]},"metadata":{},"sourceType":"module"}