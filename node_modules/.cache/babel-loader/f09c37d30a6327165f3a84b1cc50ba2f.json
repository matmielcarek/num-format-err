{"ast":null,"code":"// import React, { Component } from \"react\";\n// import Calculator from \"./calculator\"; // Import a child component from \"components\" folder. It actually adds new html tag that we can use in JSX.\n// class CalculatorList extends React.Component {\n//   render() {\n//     const { onReset, counters, onDelete, onIncrement, onDecrement } =\n//       this.props;\n//     // instead of repeating this.props.counter.(...) we define a constant\n//     return (\n//       <div>\n//         {counters.map((counter) => (\n//           <Calculator\n//             key={counter.id}\n//             onDelete={onDelete} // here we only refer to onDelete property set in parent App.jsx, same as we did in counter component.\n//             onIncrement={onIncrement}\n//             onDecrement={onDecrement}\n//             // value={counter.value}\n//             // id={counter.id}\n//             counter={counter} //counter object is carrying all the data about the counter - do not need to pass all the props separately\n//           >\n//             {/* <h4>Counter #{counter.id}</h4> */}\n//           </Calculator>\n//         ))}\n//         <button className=\"btn btn-primary btn-small m-2\" onClick={onReset}>\n//           Clear\n//         </button>\n//       </div>\n//     );\n//   }\n// }\n// export default CalculatorList;","map":{"version":3,"sources":["/Users/mateuszmielcarek/Documents/public_html/en/mat/wp-content/reactpress/apps/num-format-err/src/components/calculator_list.jsx"],"names":[],"mappings":"AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["// import React, { Component } from \"react\";\n// import Calculator from \"./calculator\"; // Import a child component from \"components\" folder. It actually adds new html tag that we can use in JSX.\n\n// class CalculatorList extends React.Component {\n//   render() {\n//     const { onReset, counters, onDelete, onIncrement, onDecrement } =\n//       this.props;\n//     // instead of repeating this.props.counter.(...) we define a constant\n//     return (\n//       <div>\n//         {counters.map((counter) => (\n//           <Calculator\n//             key={counter.id}\n//             onDelete={onDelete} // here we only refer to onDelete property set in parent App.jsx, same as we did in counter component.\n//             onIncrement={onIncrement}\n//             onDecrement={onDecrement}\n//             // value={counter.value}\n//             // id={counter.id}\n//             counter={counter} //counter object is carrying all the data about the counter - do not need to pass all the props separately\n//           >\n//             {/* <h4>Counter #{counter.id}</h4> */}\n//           </Calculator>\n//         ))}\n//         <button className=\"btn btn-primary btn-small m-2\" onClick={onReset}>\n//           Clear\n//         </button>\n//       </div>\n//     );\n//   }\n// }\n\n// export default CalculatorList;\n"]},"metadata":{},"sourceType":"module"}