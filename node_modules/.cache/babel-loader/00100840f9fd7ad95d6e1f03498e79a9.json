{"ast":null,"code":"import _classCallCheck from\"/Users/mateuszmielcarek/Documents/public_html/en/mat/wp-content/reactpress/apps/num-format-err/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/mateuszmielcarek/Documents/public_html/en/mat/wp-content/reactpress/apps/num-format-err/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/mateuszmielcarek/Documents/public_html/en/mat/wp-content/reactpress/apps/num-format-err/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/mateuszmielcarek/Documents/public_html/en/mat/wp-content/reactpress/apps/num-format-err/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from\"react\";import Selector from\"./selector\";import NumForm from\"./numform\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Calculator=/*#__PURE__*/function(_React$Component){_inherits(Calculator,_React$Component);var _super=_createSuper(Calculator);function Calculator(){var _this;_classCallCheck(this,Calculator);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state={selectors:[{id:1,lab:\"Error type:\",opt1:\"Rel.\",opt2:\"Abs.\"},{id:2,lab:\"Number notation:\",opt1:\"Std.\",opt2:\"Sci.\"},{id:3,lab:\"Error notation:\",opt1:\" ±\",opt2:\" ()\"}],forms:[{id:1,lab:\"Number to format:\",plHold:\"1.23E+3 or 1230\",prep:\"\",mess:\"Use dot [.] or comma [,] as a decimal separator.\"},{id:2,lab:\"Error:\",plHold:\"0.03\",prep:\"±\",mess:\"\"}]};return _this;}_createClass(Calculator,[{key:\"render\",value:// Render method\nfunction render(){var _this2=this;return/*#__PURE__*/ (//IMPORTANT! Bulma's grid system is used to compy with Wordpress theme. Bootstrap is used for styling components.\n_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"columns\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"column is-9 has-text-justified is-hidden-mobile\",children:/*#__PURE__*/_jsxs(\"p\",{children:[\"This tool formats given number representing a value so that it is rounded to appropiate number of significant digits based on given uncertainty of the value. If you are interested in knowing the formal and mathematical background, please visit the\",/*#__PURE__*/_jsx(\"a\",{href:\"\",children:\" blog.\"})]})}),/*#__PURE__*/_jsx(\"div\",{className:\"column has-text-right\",children:/*#__PURE__*/_jsx(\"button\",{onClick:function onClick(){return _this2.props.onDelete(_this2.props.counter.id);}//onDelete is a property of Counter component called in Counters component.\n// Here only the property onDelete of the counter, defined in counters component is called - <raising event handlers>\n// The reference must be given as an arrow function, as we need to pass an id of the counter to be deleted.\n// If instead of \"this.props.counter.id\" we would add 1, always counter of id 1 would be deleted.\n,className:\"btn btn-warning w-100\",children:\"Clear input\"})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"columns\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"column is-6\",children:/*#__PURE__*/_jsx(NumForm,{form:this.state.forms[0]},0)}),/*#__PURE__*/_jsx(\"div\",{className:\"column\",children:/*#__PURE__*/_jsx(NumForm,{form:this.state.forms[1]},1)}),/*#__PURE__*/_jsx(\"div\",{className:\"column\",children:/*#__PURE__*/_jsx(Selector,{selector:this.state.selectors[0]},0)})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"columns\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"column is-6\",children:/*#__PURE__*/_jsx(\"form\",{children:/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Formatted number:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",className:\"form-control\",readOnly:true})]})})}),/*#__PURE__*/_jsx(\"div\",{className:\"column\",children:/*#__PURE__*/_jsx(Selector,{selector:this.state.selectors[1]},1)}),/*#__PURE__*/_jsx(\"div\",{className:\"column\",children:/*#__PURE__*/_jsx(Selector,{selector:this.state.selectors[2]},2)})]}),/*#__PURE__*/_jsx(\"hr\",{className:\"w-100\"})]}));}// Method to change button classes on click to make it a selector.\n},{key:\"changeButtonClass\",value:function changeButtonClass(){var classes=\"btn btn-sm btn-\";classes+=this.props.counter.value===0?\"primary\":\"secondary\";// If counter value is 0 add \"Warning\", else add \"primary\".\nreturn classes;}// Method to format counter based on value.\n},{key:\"formatCount\",value:function formatCount(){// Object destructuring - picking a single property of an object and store it in a const.\nvar value=this.props.counter.value;return value===0?\"Zero\":value;// Instead of plain text \"Zero\" it is also possible to return a JSX expression: <h1>Zero</h1>.\n// Constant (const) can also store JSX expression. const x = <h1>Zero</h1>\n}///////////////////////////////////////////////////////////\n//   //[USAGE OF <componentDidMount>]\n//   // Called after component is rendered into the DOM. Place to call data form the server.\n//   componentDidMount() {\n// //Ajax Call\n//     this.setState({data from the server})\n//   }\n}]);return Calculator;}(React.Component);export default Calculator;","map":{"version":3,"sources":["/Users/mateuszmielcarek/Documents/public_html/en/mat/wp-content/reactpress/apps/num-format-err/src/components/calculator.jsx"],"names":["React","Component","Selector","NumForm","Calculator","state","selectors","id","lab","opt1","opt2","forms","plHold","prep","mess","props","onDelete","counter","classes","value"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Selector from \"./selector\";\nimport NumForm from \"./numform\";\n\nclass Calculator extends React.Component {\n  state = {\n    selectors: [\n      { id: 1, lab: \"Error type:\", opt1: \"Rel.\", opt2: \"Abs.\" },\n      { id: 2, lab: \"Number notation:\", opt1: \"Std.\", opt2: \"Sci.\" },\n      {\n        id: 3,\n        lab: \"Error notation:\",\n        opt1: \" ±\",\n        opt2: \" ()\",\n      },\n    ],\n    forms: [\n      {\n        id: 1,\n        lab: \"Number to format:\",\n        plHold: \"1.23E+3 or 1230\",\n        prep: \"\",\n        mess: \"Use dot [.] or comma [,] as a decimal separator.\",\n      },\n      { id: 2, lab: \"Error:\", plHold: \"0.03\", prep: \"±\", mess: \"\" },\n    ],\n  };\n\n  // Render method\n  render() {\n    return (\n      //IMPORTANT! Bulma's grid system is used to compy with Wordpress theme. Bootstrap is used for styling components.\n      <div>\n        <div className=\"columns\">\n          <div className=\"column is-9 has-text-justified is-hidden-mobile\">\n            <p>\n              This tool formats given number representing a value so that it is\n              rounded to appropiate number of significant digits based on given\n              uncertainty of the value. If you are interested in knowing the\n              formal and mathematical background, please visit the\n              <a href=\"\"> blog.</a>\n            </p>\n          </div>\n          <div className=\"column has-text-right\">\n            <button\n              onClick={() => this.props.onDelete(this.props.counter.id)} //onDelete is a property of Counter component called in Counters component.\n              // Here only the property onDelete of the counter, defined in counters component is called - <raising event handlers>\n              // The reference must be given as an arrow function, as we need to pass an id of the counter to be deleted.\n              // If instead of \"this.props.counter.id\" we would add 1, always counter of id 1 would be deleted.\n              className=\"btn btn-warning w-100\"\n            >\n              Clear input\n            </button>\n          </div>\n        </div>\n        <div className=\"columns\">\n          <div className=\"column is-6\">\n            {/*---------------------------------------------------------------------INPUT - NUMBER*/}\n            <NumForm key={0} form={this.state.forms[0]}></NumForm>\n            {/* <form>\n              <div className=\"form-group\">\n                <label>Number to format:</label>\n                <input\n                  type=\"text\"\n                  placeholder=\"1.23E+3 or 1230\"\n                  className=\"form-control\"\n                />\n                <small className=\"form-text text-muted\">\n                  Use dot [.] or comma [,] as a decimal separator.\n                </small>\n              </div>\n            </form> */}\n          </div>\n          {/*---------------------------------------------------------------------INPUT - ERROR*/}\n          <div className=\"column\">\n            <NumForm key={1} form={this.state.forms[1]}></NumForm>\n            {/* <form>\n              <label>Error:</label>\n              <div className=\"input-group\">\n                <div className=\"input-group-prepend\">\n                  <span className=\"input-group-text\">±</span>\n                </div>\n                <input\n                  type=\"text\"\n                  placeholder=\"0.03\"\n                  className=\"form-control\"\n                />\n              </div>\n            </form> */}\n          </div>\n          <div className=\"column\">\n            {/*---------------------------------------------------------------------SELECTOR - ERR*/}\n            <Selector key={0} selector={this.state.selectors[0]}></Selector>\n          </div>\n        </div>\n        <div className=\"columns\">\n          {/*---------------------------------------------------------------------INPUT - FORM. NUMBER*/}\n          <div className=\"column is-6\">\n            <form>\n              <div className=\"form-group\">\n                <label>Formatted number:</label>\n                <input type=\"text\" className=\"form-control\" readOnly />\n              </div>\n            </form>\n          </div>\n          <div className=\"column\">\n            {/*---------------------------------------------------------------------SELECTOR - NUM NOTATION*/}\n            <Selector key={1} selector={this.state.selectors[1]}></Selector>\n            {/* {this.state.selectors.map((selector) => (\n              <Selector key={selector.id} selector={selector}></Selector>\n            ))} */}\n          </div>\n          <div className=\"column\">\n            {/*---------------------------------------------------------------------SELECTORS - ERR NOTATION*/}\n            <Selector key={2} selector={this.state.selectors[2]}></Selector>\n          </div>\n        </div>\n\n        {/*---------------------------------------------------------------------DELETE BTN*/}\n        <hr className=\"w-100\" />\n      </div>\n    );\n  }\n\n  // Method to change button classes on click to make it a selector.\n  changeButtonClass() {\n    let classes = \"btn btn-sm btn-\";\n    classes += this.props.counter.value === 0 ? \"primary\" : \"secondary\"; // If counter value is 0 add \"Warning\", else add \"primary\".\n    return classes;\n  }\n\n  // Method to format counter based on value.\n  formatCount() {\n    // Object destructuring - picking a single property of an object and store it in a const.\n    const { value: value } = this.props.counter;\n    return value === 0 ? \"Zero\" : value; // Instead of plain text \"Zero\" it is also possible to return a JSX expression: <h1>Zero</h1>.\n    // Constant (const) can also store JSX expression. const x = <h1>Zero</h1>\n  }\n\n  ///////////////////////////////////////////////////////////\n  //   //[USAGE OF <componentDidMount>]\n  //   // Called after component is rendered into the DOM. Place to call data form the server.\n  //   componentDidMount() {\n  // //Ajax Call\n  //     this.setState({data from the server})\n  //   }\n}\n\nexport default Calculator;\n"]},"metadata":{},"sourceType":"module"}