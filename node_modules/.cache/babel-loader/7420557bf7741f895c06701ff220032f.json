{"ast":null,"code":"var _jsxFileName = \"/Users/mateuszmielcarek/counter-app/src/components/counter.jsx\";\nimport React, { Component } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Counter extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      count: 0,\n      tags: [\"tag1\", \"tag2\", \"tag3\"]\n    };\n\n    this.handleIncrement = product => {\n      console.log(product); // console.log(\"Increment clicked\", this);\n      // this.state.count++; // we cannot change value of count directly like this - React will not be aware that it changed\n\n      this.setState({\n        count: this.state.count + 1\n      });\n    };\n  }\n\n  renderTags() {\n    if (this.state.tags.length === 0) return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"There are no tags!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 46\n    }, this);\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: this.state.tags.map(tag => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: tag\n      }, tag, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this);\n  } //   constructor() {\n  //     super(); //to have the\n  //     this.handleIncrement = this.handleIncrement.bind(this);\n  //   }\n  //Functions in javaScript are objects so they have objects and methods.\n  //Above is done to get access to the Counter object in function.\n  //We will be able to update \"state\" property.\n  //Solution to bind event handlers to \"This\"\n  //There is another way of doing this:\n  //   handleIncrement() {\n  //     console.log(\"Increment clicked\", this);\n  //   }\n\n\n  //using an arrow function is cleaner solution\n  //   doHandleIncrement = () => {\n  //     this.handleIncrement({ id: 1 });\n  //   };\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: this.getBadgeClasses(),\n        children: this.formatCount()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        //   onClick={() => this.handleIncrement(product)} // passing arguments to event handlers - pass arrow function to event identifier\n        onClick: () => {\n          this.handleIncrement({\n            id: 1\n          });\n        },\n        className: \"btn btn-secondary btn-sm\",\n        children: \"Increment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), this.state.tags.length === 0 && \"please create a new tag!\", this.renderTags()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this);\n  }\n\n  getBadgeClasses() {\n    let classes = \"badge m-2 bg-\";\n    classes += this.state.count === 0 ? \"warning\" : \"primary\";\n    return classes;\n  }\n\n  formatCount() {\n    const {\n      count\n    } = this.state;\n    return count === 0 ? \"Zero\" : count;\n  }\n\n}\n\nexport default Counter;","map":{"version":3,"sources":["/Users/mateuszmielcarek/counter-app/src/components/counter.jsx"],"names":["React","Component","Counter","state","count","tags","handleIncrement","product","console","log","setState","renderTags","length","map","tag","render","getBadgeClasses","formatCount","id","classes"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;AAEA,MAAMC,OAAN,SAAsBF,KAAK,CAACC,SAA5B,CAAsC;AAAA;AAAA;AAAA,SACpCE,KADoC,GAC5B;AACNC,MAAAA,KAAK,EAAE,CADD;AAENC,MAAAA,IAAI,EAAE,CAAC,MAAD,EAAS,MAAT,EAAiB,MAAjB;AAFA,KAD4B;;AAAA,SA8BpCC,eA9BoC,GA8BjBC,OAAD,IAAa;AAC7BC,MAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ,EAD6B,CAE7B;AACA;;AACA,WAAKG,QAAL,CAAc;AAAEN,QAAAA,KAAK,EAAE,KAAKD,KAAL,CAAWC,KAAX,GAAmB;AAA5B,OAAd;AACD,KAnCmC;AAAA;;AAMpCO,EAAAA,UAAU,GAAG;AACX,QAAI,KAAKR,KAAL,CAAWE,IAAX,CAAgBO,MAAhB,KAA2B,CAA/B,EAAkC,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AAClC,wBACE;AAAA,gBACG,KAAKT,KAAL,CAAWE,IAAX,CAAgBQ,GAAhB,CAAqBC,GAAD,iBACnB;AAAA,kBAAeA;AAAf,SAASA,GAAT;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YADF;AAOD,GAfmC,CAiBpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAQA;AAEA;AACA;AACA;AAEAC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,8BACE;AAAM,QAAA,SAAS,EAAE,KAAKC,eAAL,EAAjB;AAAA,kBAA0C,KAAKC,WAAL;AAA1C;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AACE;AACA,QAAA,OAAO,EAAE,MAAM;AACb,eAAKX,eAAL,CAAqB;AAAEY,YAAAA,EAAE,EAAE;AAAN,WAArB;AACD,SAJH;AAKE,QAAA,SAAS,EAAC,0BALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,EAWG,KAAKf,KAAL,CAAWE,IAAX,CAAgBO,MAAhB,KAA2B,CAA3B,IAAgC,0BAXnC,EAYG,KAAKD,UAAL,EAZH;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAgBD;;AAEDK,EAAAA,eAAe,GAAG;AAChB,QAAIG,OAAO,GAAG,eAAd;AACAA,IAAAA,OAAO,IAAI,KAAKhB,KAAL,CAAWC,KAAX,KAAqB,CAArB,GAAyB,SAAzB,GAAqC,SAAhD;AACA,WAAOe,OAAP;AACD;;AAEDF,EAAAA,WAAW,GAAG;AACZ,UAAM;AAAEb,MAAAA;AAAF,QAAY,KAAKD,KAAvB;AACA,WAAOC,KAAK,KAAK,CAAV,GAAc,MAAd,GAAuBA,KAA9B;AACD;;AAtEmC;;AAyEtC,eAAeF,OAAf","sourcesContent":["import React, { Component } from \"react\";\n\nclass Counter extends React.Component {\n  state = {\n    count: 0,\n    tags: [\"tag1\", \"tag2\", \"tag3\"],\n  };\n\n  renderTags() {\n    if (this.state.tags.length === 0) return <p>There are no tags!</p>;\n    return (\n      <ul>\n        {this.state.tags.map((tag) => (\n          <li key={tag}>{tag}</li>\n        ))}\n      </ul>\n    );\n  }\n\n  //   constructor() {\n  //     super(); //to have the\n  //     this.handleIncrement = this.handleIncrement.bind(this);\n  //   }\n  //Functions in javaScript are objects so they have objects and methods.\n  //Above is done to get access to the Counter object in function.\n  //We will be able to update \"state\" property.\n  //Solution to bind event handlers to \"This\"\n  //There is another way of doing this:\n  //   handleIncrement() {\n  //     console.log(\"Increment clicked\", this);\n  //   }\n\n  handleIncrement = (product) => {\n    console.log(product);\n    // console.log(\"Increment clicked\", this);\n    // this.state.count++; // we cannot change value of count directly like this - React will not be aware that it changed\n    this.setState({ count: this.state.count + 1 });\n  };\n  //using an arrow function is cleaner solution\n\n  //   doHandleIncrement = () => {\n  //     this.handleIncrement({ id: 1 });\n  //   };\n\n  render() {\n    return (\n      <div>\n        <span className={this.getBadgeClasses()}>{this.formatCount()}</span>\n        <button\n          //   onClick={() => this.handleIncrement(product)} // passing arguments to event handlers - pass arrow function to event identifier\n          onClick={() => {\n            this.handleIncrement({ id: 1 });\n          }}\n          className=\"btn btn-secondary btn-sm\"\n        >\n          Increment\n        </button>\n        {this.state.tags.length === 0 && \"please create a new tag!\"}\n        {this.renderTags()}\n      </div>\n    );\n  }\n\n  getBadgeClasses() {\n    let classes = \"badge m-2 bg-\";\n    classes += this.state.count === 0 ? \"warning\" : \"primary\";\n    return classes;\n  }\n\n  formatCount() {\n    const { count } = this.state;\n    return count === 0 ? \"Zero\" : count;\n  }\n}\n\nexport default Counter;\n"]},"metadata":{},"sourceType":"module"}