{"ast":null,"code":"var _jsxFileName = \"/Users/mateuszmielcarek/counter-app/src/App.js\";\nimport React, { Component } from 'react';\nimport NavBar from './components/navbar';\nimport './App.css';\nimport Counters from './components/counters'; //Now we want to exchange data between two child components: Counters and Navbar (to display number of items)\n// There is no parent-child relationship between the two\n//We need to raise the state of Counters component up to App\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      counters: [{\n        id: 1,\n        value: 4\n      }, {\n        id: 2,\n        value: 0\n      }, {\n        id: 3,\n        value: 0\n      }, {\n        id: 4,\n        value: 0\n      }]\n    };\n\n    this.handleIncrement = counter => {\n      // this.state.count++; // we cannot change value of count directly like this - React will not be aware that it changed\n      const counters = [...this.state.counters]; // ... is cloning array of counters from state to var \"counters\"\n\n      const index = counters.indexOf(counter); // find index of counter within counters (in state)\n\n      counters[index] = { ...counter\n      }; //to clone the counter at exact location - counter object in state remains unchanged\n\n      counters[index].value++;\n      this.setState({\n        counters\n      }); //update state\n    };\n\n    this.handleDecrement = counter => {\n      // this.state.count++; // we cannot change value of count directly like this - React will not be aware that it changed\n      const counters = [...this.state.counters]; // ... is cloning array of counters from state to var \"counters\"\n\n      const index = counters.indexOf(counter); // find index of counter within counters (in state)\n\n      counters[index] = { ...counter\n      }; //to clone the counter at exact location - counter object in state remains unchanged\n\n      counters[index].value--;\n      this.setState({\n        counters\n      }); //update state\n    };\n\n    this.handleDelete = counterId => {\n      // console.log(\"Delete event handled.\", counterId);\n      const counters = this.state.counters.filter(c => c.id !== counterId); //We do not remove the counter from state - we only make a new array after the event.\n\n      this.setState({\n        counters\n      });\n    };\n\n    this.handleReset = () => {\n      const counters = this.state.counters.map(c => {\n        c.value = 0;\n        return c;\n      });\n      this.setState({\n        counters\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(NavBar, {\n        totalCounters: this.state.counters.filter(c => c.value > 0).length\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        className: \"container\",\n        children: /*#__PURE__*/_jsxDEV(Counters, {\n          counters: this.state.counters // Instead of passing each prop separately, we pass the whole counters object.\n          ,\n          onReset: this.handleReset,\n          onIncrement: this.handleIncrement,\n          onDelete: this.handleDelete\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/mateuszmielcarek/counter-app/src/App.js"],"names":["React","Component","NavBar","Counters","App","state","counters","id","value","handleIncrement","counter","index","indexOf","setState","handleDecrement","handleDelete","counterId","filter","c","handleReset","map","render","length"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport NavBar from './components/navbar';\nimport './App.css';\nimport Counters from './components/counters';\n\n//Now we want to exchange data between two child components: Counters and Navbar (to display number of items)\n// There is no parent-child relationship between the two\n//We need to raise the state of Counters component up to App\n\nclass App extends Component {\n\n  state = {\n    counters: [\n      { id: 1, value: 4 },\n      { id: 2, value: 0 },\n      { id: 3, value: 0 },\n      { id: 4, value: 0 },\n    ],\n  };\n\n  handleIncrement = (counter) => {\n    // this.state.count++; // we cannot change value of count directly like this - React will not be aware that it changed\n    const counters = [...this.state.counters]; // ... is cloning array of counters from state to var \"counters\"\n    const index = counters.indexOf(counter); // find index of counter within counters (in state)\n    counters[index] = { ...counter }; //to clone the counter at exact location - counter object in state remains unchanged\n    counters[index].value++;\n    this.setState({ counters }); //update state\n  };\n\n  handleDecrement = (counter) => {\n    // this.state.count++; // we cannot change value of count directly like this - React will not be aware that it changed\n    const counters = [...this.state.counters]; // ... is cloning array of counters from state to var \"counters\"\n    const index = counters.indexOf(counter); // find index of counter within counters (in state)\n    counters[index] = { ...counter }; //to clone the counter at exact location - counter object in state remains unchanged\n    counters[index].value--;\n    this.setState({ counters }); //update state\n  };\n\n  handleDelete = (counterId) => {\n    // console.log(\"Delete event handled.\", counterId);\n    const counters = this.state.counters.filter((c) => c.id !== counterId); //We do not remove the counter from state - we only make a new array after the event.\n    this.setState({ counters });\n  };\n\n  handleReset = () => {\n    const counters = this.state.counters.map((c) => {\n      c.value = 0;\n      return c;\n    });\n    this.setState({ counters });\n  };\n\n  render(){\n    return (\n      <React.Fragment>\n        <NavBar totalCounters={this.state.counters.filter(c => c.value>0).length}></NavBar>\n        <main className=\"container\">\n          <Counters\n            counters = {this.state.counters} // Instead of passing each prop separately, we pass the whole counters object.\n            onReset = {this.handleReset}\n            onIncrement = {this.handleIncrement}\n            onDelete = {this.handleDelete}\n          />\n        </main>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}