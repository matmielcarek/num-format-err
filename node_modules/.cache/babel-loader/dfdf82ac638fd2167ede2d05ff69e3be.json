{"ast":null,"code":"var _jsxFileName = \"/Users/Mateusz/Documents/Kodowanie/num-format-err/src/components/calculator.jsx\";\n\n/* ------------------------------------------------------------------------------------------------------------------ */\n\n/*                                                       imports                                                      */\n\n/* ------------------------------------------------------------------------------------------------------------------ */\n// eslint-disable-next-line\nimport React, { Component } from \"react\";\nimport Selector from \"./selector\";\nimport NumForm from \"./numform\";\n/* ------------------------------------------------------------------------------------------------------------------ */\n\n/*                                                  rounding function                                                 */\n\n/* ------------------------------------------------------------------------------------------------------------------ */\n\n/*round value to appropriate count of significant digits based on absolute error*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction rnSig(val, absErr) {\n  const t = Math.floor(Math.log10(0.5 / absErr)); //calc number of fractional significant digits based on absolute error\n\n  const ord = Math.floor(Math.log10(val)); //calc order of magnitude of the number\n  // const sig = ord + t + 1; //calc number of significant digits by adding t to order of magnitude of the number\n\n  /* initiate variables ----------------------------------------------------------------------------------------------- */\n\n  let valSci = val,\n      errSci = absErr,\n      valStr = val,\n      valStrSci = val,\n      errStr = absErr,\n      errStrSci = absErr;\n  /* calculate base of scientific notation ---------------------------------------------------------------------------- */\n\n  valSci = valSci / 10 ** ord;\n  errSci = errSci / 10 ** ord;\n  /* rounded value in decimal notation -------------------------------------------------------------------------------- */\n\n  valStr = Math.round(valStr / 10 ** -t) * 10 ** -t;\n  /* rounded value in scientific notation ----------------------------------------------------------------------------- */\n\n  valStrSci = Math.round(valSci / 10 ** (-t - ord)) * 10 ** (-t - ord);\n  valStrSci = valStrSci.toFixed(t + ord + 1);\n  /* rounded error in decimal notation -------------------------------------------------------------------------------- */\n\n  errStr = Math.round(errStr / 10 ** -(t + 1)) * 10 ** -(t + 1);\n  /* rounded error in scientific notation ----------------------------------------------------------------------------- */\n\n  errStrSci = errSci.toFixed(t + ord + 1);\n  /* where abs. error in decimal range, add \"0\" to match decimal places of the error ---------------------------------- */\n\n  if (t >= 0) {\n    valStr = valStr.toFixed(t + 1);\n    errStr = errStr.toFixed(t + 1);\n  }\n  /* return object with formatted values ------------------------------------------------------------------------------ */\n\n\n  return {\n    valStr: valStr,\n    errStr: errStr,\n    valStrSci: valStrSci,\n    errStrSci: errStrSci,\n    ord: ord === Infinity ? 0 : ord\n  };\n}\n/* ------------------------------------------------------------------------------------------------------------------ */\n\n/*                                                  verify user input                                                 */\n\n/* ------------------------------------------------------------------------------------------------------------------ */\n\n\nfunction CheckNumberInput(inp) {\n  inp = inp.replace(/,/g, \".\");\n  console.log(inp);\n  console.log(inp.match(/\\./g || []).length); // console.log(\"....234sdf\".match(/./g).length);\n\n  inp = parseFloat(inp);\n}\n/* ------------------------------------------------------------------------------------------------------------------ */\n\n/*                                              number-string constructor                                             */\n\n/* ------------------------------------------------------------------------------------------------------------------ */\n\n\n_c = CheckNumberInput;\n\nfunction ConstructString(val, err, errType, sign, notation) {\n  /* convert user ipnut to float -------------------------------------------------------------------------------------- */\n  val = CheckNumberInput(val);\n  err = CheckNumberInput(err);\n  /* check if inputs can be read as numbers --------------------------------------------------------------------------- */\n\n  if (isNaN(val) || isNaN(err)) {\n    return \"Please specify number and error: i.e. 1234 and 0.04\";\n  }\n\n  let absErr = 0,\n      resString = \"\";\n  /* calculate relative and absolute error ---------------------------------------------------------------------------- */\n\n  if (errType === \"Rel.\") {\n    absErr = val * err;\n  } else {\n    absErr = err;\n  }\n  /* check for absErr greater than a number and if absErr is not 0 ---------------------------------------------------- */\n\n\n  if (absErr > 0 && absErr < val) {\n    /* read data from object returned by function rnSig ----------------------------------------------------------------- */\n    const num = rnSig(val, absErr);\n    const valStr = num.valStr,\n          valStrSci = num.valStrSci,\n          errStr = num.errStr,\n          errStrSci = num.errStrSci,\n          errDigits = (errStr / 10 ** Math.floor(Math.log10(errStr))).toFixed(0),\n          //absolute error in form of string of least significant digits\n    ord = num.ord;\n    /* construct number representation based on user-selected settings -------------------------------------------------- */\n\n    if (sign === \"±\") {\n      if (notation === \"Sci.\") {\n        resString = \"(\" + valStrSci + sign + errStrSci + \")e\" + (ord >= 0 ? \"+\" : \"\") + ord;\n      } else {\n        resString = valStr + sign + errStr;\n      }\n    } else {\n      if (notation === \"Sci.\") {\n        resString = valStrSci + \"(\" + errDigits + \")e\" + (ord >= 0 ? \"+\" : \"\") + ord;\n      } else {\n        resString = valStr + \"(\" + errDigits + \")\";\n      }\n    }\n\n    return resString;\n  } else {\n    return \"Number shall be greater than its absolute error!\";\n  }\n}\n/* ------------------------------------------------------------------------------------------------------------------ */\n\n/*                                              main calculator component                                             */\n\n/* ------------------------------------------------------------------------------------------------------------------ */\n\n\n_c2 = ConstructString;\n\nclass Calculator extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleValChange = val => {\n      this.setState({\n        val\n      });\n    };\n\n    this.handleErrChange = err => {\n      this.setState({\n        err\n      });\n    };\n\n    this.handleErrTypeChange = errType => {\n      this.setState({\n        errType\n      });\n    };\n\n    this.handleSignChange = sign => {\n      this.setState({\n        sign\n      });\n    };\n\n    this.handleNotationChange = notation => {\n      this.setState({\n        notation\n      });\n    };\n\n    this.handleResultChange = str => {\n      this.setState({\n        str\n      });\n    };\n\n    this.state = {\n      val: \"123\",\n      err: \"0.1\",\n      errType: \"Rel.\",\n      notation: \"Std.\",\n      sign: \"±\",\n      selectors: [{\n        id: 1,\n        lab: \"Error type:\",\n        opt1: \"Rel.\",\n        opt2: \"Abs.\"\n      }, {\n        id: 2,\n        lab: \"Number notation:\",\n        opt1: \"Std.\",\n        opt2: \"Sci.\"\n      }, {\n        id: 3,\n        lab: \"Error notation:\",\n        opt1: \"±\",\n        opt2: \"()\"\n      }],\n      forms: [{\n        id: 1,\n        lab: \"Number to format:\",\n        plHold: \"i.e. 1.23E+3 or 1230\",\n        prep: \"\",\n        mess: \"Use dot [.] or comma [,] as a decimal separator.\",\n        readonly: 0\n      }, {\n        id: 2,\n        lab: \"Error:\",\n        plHold: \"i.e. 3E-2 or 0.03\",\n        prep: \"±\",\n        mess: \"\",\n        readonly: 0\n      }, {\n        id: 3,\n        lab: \"Formatted number:\",\n        plHold: \"\",\n        prep: \"\",\n        mess: \"\",\n        readonly: 1\n      } //inValue: \"\",\n      ]\n    };\n  }\n  /* ------------------------------------------------------------------------------------------------------------------ */\n\n  /*                                                   event handlers                                                   */\n\n  /* ------------------------------------------------------------------------------------------------------------------ */\n\n\n  /* ------------------------------------------------------------------------------------------------------------------ */\n\n  /*                                                    render method                                                   */\n\n  /* ------------------------------------------------------------------------------------------------------------------ */\n  render() {\n    const val = this.state.val;\n    const err = this.state.err;\n    const errType = this.state.errType;\n    const sign = this.state.sign;\n    const notation = this.state.notation;\n    const str = ConstructString(val, err, errType, sign, notation);\n    return (\n      /*#__PURE__*/\n      //IMPORTANT! Bulma's grid system is used to compy with Wordpress theme. Bootstrap is used for styling components.\n      _jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"columns\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"column is-9 has-text-justified is-hidden-mobile\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"This tool formats a given number so that it is rounded to an appropriate count of significant digits based on the given uncertainty of the value. If you are interested in the formal and mathematical background, please visit the\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n                href: \"https://mmielcarek.com/en/mat/rounding_numbers\",\n                children: [\" \", \"blog.\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 217,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"column has-text-right\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: this.handleCalc,\n              className: \"btn btn-warning w-100\",\n              children: \"Clear input\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 224,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"columns\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"column is-6\",\n            children: /*#__PURE__*/_jsxDEV(NumForm, {\n              form: this.state.forms[0],\n              onInputChange: this.handleValChange,\n              inp: val\n            }, 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 232,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"column\",\n            children: /*#__PURE__*/_jsxDEV(NumForm, {\n              form: this.state.forms[1],\n              onInputChange: this.handleErrChange,\n              inp: err\n            }, 1, false, {\n              fileName: _jsxFileName,\n              lineNumber: 241,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"column\",\n            children: /*#__PURE__*/_jsxDEV(Selector, {\n              selector: this.state.selectors[0],\n              onSelectionChange: this.handleErrTypeChange\n            }, 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 250,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"columns\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"column is-6\",\n            children: /*#__PURE__*/_jsxDEV(NumForm, {\n              form: this.state.forms[2],\n              onSelectionChange: this.handleResultChange,\n              inp: str\n            }, 2, false, {\n              fileName: _jsxFileName,\n              lineNumber: 260,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"column\",\n            children: /*#__PURE__*/_jsxDEV(Selector, {\n              selector: this.state.selectors[1],\n              onSelectionChange: this.handleNotationChange\n            }, 1, false, {\n              fileName: _jsxFileName,\n              lineNumber: 269,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"column\",\n            children: /*#__PURE__*/_jsxDEV(Selector, {\n              selector: this.state.selectors[2],\n              onSelectionChange: this.handleSignChange\n            }, 2, false, {\n              fileName: _jsxFileName,\n              lineNumber: 277,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n          className: \"w-100\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 7\n      }, this)\n    );\n  }\n\n}\n\nexport default Calculator;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CheckNumberInput\");\n$RefreshReg$(_c2, \"ConstructString\");","map":{"version":3,"sources":["/Users/Mateusz/Documents/Kodowanie/num-format-err/src/components/calculator.jsx"],"names":["React","Component","Selector","NumForm","rnSig","val","absErr","t","Math","floor","log10","ord","valSci","errSci","valStr","valStrSci","errStr","errStrSci","round","toFixed","Infinity","CheckNumberInput","inp","replace","console","log","match","length","parseFloat","ConstructString","err","errType","sign","notation","isNaN","resString","num","errDigits","Calculator","constructor","props","handleValChange","setState","handleErrChange","handleErrTypeChange","handleSignChange","handleNotationChange","handleResultChange","str","state","selectors","id","lab","opt1","opt2","forms","plHold","prep","mess","readonly","render","handleCalc"],"mappings":";;AAAA;;AACA;;AACA;AACA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA;;AACA;;AACA;;AACA;;;;AACA,SAASC,KAAT,CAAeC,GAAf,EAAoBC,MAApB,EAA4B;AAC1B,QAAMC,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,KAAL,CAAW,MAAMJ,MAAjB,CAAX,CAAV,CAD0B,CACsB;;AAChD,QAAMK,GAAG,GAAGH,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,KAAL,CAAWL,GAAX,CAAX,CAAZ,CAF0B,CAEe;AACzC;;AACA;;AACA,MAAIO,MAAM,GAAGP,GAAb;AAAA,MACEQ,MAAM,GAAGP,MADX;AAAA,MAEEQ,MAAM,GAAGT,GAFX;AAAA,MAGEU,SAAS,GAAGV,GAHd;AAAA,MAIEW,MAAM,GAAGV,MAJX;AAAA,MAKEW,SAAS,GAAGX,MALd;AAMA;;AACAM,EAAAA,MAAM,GAAGA,MAAM,GAAG,MAAMD,GAAxB;AACAE,EAAAA,MAAM,GAAGA,MAAM,GAAG,MAAMF,GAAxB;AACA;;AACAG,EAAAA,MAAM,GAAGN,IAAI,CAACU,KAAL,CAAWJ,MAAM,GAAG,MAAM,CAACP,CAA3B,IAAgC,MAAM,CAACA,CAAhD;AACA;;AACAQ,EAAAA,SAAS,GAAGP,IAAI,CAACU,KAAL,CAAWN,MAAM,GAAG,OAAO,CAACL,CAAD,GAAKI,GAAZ,CAApB,IAAwC,OAAO,CAACJ,CAAD,GAAKI,GAAZ,CAApD;AACAI,EAAAA,SAAS,GAAGA,SAAS,CAACI,OAAV,CAAkBZ,CAAC,GAAGI,GAAJ,GAAU,CAA5B,CAAZ;AACA;;AACAK,EAAAA,MAAM,GAAGR,IAAI,CAACU,KAAL,CAAWF,MAAM,GAAG,MAAM,EAAET,CAAC,GAAG,CAAN,CAA1B,IAAsC,MAAM,EAAEA,CAAC,GAAG,CAAN,CAArD;AACA;;AACAU,EAAAA,SAAS,GAAGJ,MAAM,CAACM,OAAP,CAAeZ,CAAC,GAAGI,GAAJ,GAAU,CAAzB,CAAZ;AACA;;AACA,MAAIJ,CAAC,IAAI,CAAT,EAAY;AACVO,IAAAA,MAAM,GAAGA,MAAM,CAACK,OAAP,CAAeZ,CAAC,GAAG,CAAnB,CAAT;AACAS,IAAAA,MAAM,GAAGA,MAAM,CAACG,OAAP,CAAeZ,CAAC,GAAG,CAAnB,CAAT;AACD;AACD;;;AACA,SAAO;AACLO,IAAAA,MAAM,EAAEA,MADH;AAELE,IAAAA,MAAM,EAAEA,MAFH;AAGLD,IAAAA,SAAS,EAAEA,SAHN;AAILE,IAAAA,SAAS,EAAEA,SAJN;AAKLN,IAAAA,GAAG,EAAEA,GAAG,KAAKS,QAAR,GAAmB,CAAnB,GAAuBT;AALvB,GAAP;AAOD;AACD;;AACA;;AACA;;;AACA,SAASU,gBAAT,CAA0BC,GAA1B,EAA+B;AAC7BA,EAAAA,GAAG,GAAGA,GAAG,CAACC,OAAJ,CAAY,IAAZ,EAAkB,GAAlB,CAAN;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAYH,GAAG,CAACI,KAAJ,CAAU,SAAS,EAAnB,EAAuBC,MAAnC,EAH6B,CAI7B;;AAEAL,EAAAA,GAAG,GAAGM,UAAU,CAACN,GAAD,CAAhB;AACD;AACD;;AACA;;AACA;;;KAVSD,gB;;AAWT,SAASQ,eAAT,CAAyBxB,GAAzB,EAA8ByB,GAA9B,EAAmCC,OAAnC,EAA4CC,IAA5C,EAAkDC,QAAlD,EAA4D;AAC1D;AACA5B,EAAAA,GAAG,GAAGgB,gBAAgB,CAAChB,GAAD,CAAtB;AACAyB,EAAAA,GAAG,GAAGT,gBAAgB,CAACS,GAAD,CAAtB;AAEA;;AACA,MAAII,KAAK,CAAC7B,GAAD,CAAL,IAAc6B,KAAK,CAACJ,GAAD,CAAvB,EAA8B;AAC5B,WAAO,qDAAP;AACD;;AAED,MAAIxB,MAAM,GAAG,CAAb;AAAA,MACE6B,SAAS,GAAG,EADd;AAGA;;AACA,MAAIJ,OAAO,KAAK,MAAhB,EAAwB;AACtBzB,IAAAA,MAAM,GAAGD,GAAG,GAAGyB,GAAf;AACD,GAFD,MAEO;AACLxB,IAAAA,MAAM,GAAGwB,GAAT;AACD;AAED;;;AACA,MAAIxB,MAAM,GAAG,CAAT,IAAcA,MAAM,GAAGD,GAA3B,EAAgC;AAC9B;AACA,UAAM+B,GAAG,GAAGhC,KAAK,CAACC,GAAD,EAAMC,MAAN,CAAjB;AACA,UAAMQ,MAAM,GAAGsB,GAAG,CAACtB,MAAnB;AAAA,UACEC,SAAS,GAAGqB,GAAG,CAACrB,SADlB;AAAA,UAEEC,MAAM,GAAGoB,GAAG,CAACpB,MAFf;AAAA,UAGEC,SAAS,GAAGmB,GAAG,CAACnB,SAHlB;AAAA,UAIEoB,SAAS,GAAG,CAACrB,MAAM,GAAG,MAAMR,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,KAAL,CAAWM,MAAX,CAAX,CAAhB,EAAgDG,OAAhD,CAAwD,CAAxD,CAJd;AAAA,UAI0E;AACxER,IAAAA,GAAG,GAAGyB,GAAG,CAACzB,GALZ;AAOA;;AACA,QAAIqB,IAAI,KAAK,GAAb,EAAkB;AAChB,UAAIC,QAAQ,KAAK,MAAjB,EAAyB;AACvBE,QAAAA,SAAS,GACP,MACApB,SADA,GAEAiB,IAFA,GAGAf,SAHA,GAIA,IAJA,IAKCN,GAAG,IAAI,CAAP,GAAW,GAAX,GAAiB,EALlB,IAMAA,GAPF;AAQD,OATD,MASO;AACLwB,QAAAA,SAAS,GAAGrB,MAAM,GAAGkB,IAAT,GAAgBhB,MAA5B;AACD;AACF,KAbD,MAaO;AACL,UAAIiB,QAAQ,KAAK,MAAjB,EAAyB;AACvBE,QAAAA,SAAS,GACPpB,SAAS,GAAG,GAAZ,GAAkBsB,SAAlB,GAA8B,IAA9B,IAAsC1B,GAAG,IAAI,CAAP,GAAW,GAAX,GAAiB,EAAvD,IAA6DA,GAD/D;AAED,OAHD,MAGO;AACLwB,QAAAA,SAAS,GAAGrB,MAAM,GAAG,GAAT,GAAeuB,SAAf,GAA2B,GAAvC;AACD;AACF;;AACD,WAAOF,SAAP;AACD,GAjCD,MAiCO;AACL,WAAO,kDAAP;AACD;AACF;AACD;;AACA;;AACA;;;MA5DSN,e;;AA6DT,MAAMS,UAAN,SAAyBtC,KAAK,CAACC,SAA/B,CAAyC;AACvCsC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAiDnBC,eAjDmB,GAiDApC,GAAD,IAAS;AACzB,WAAKqC,QAAL,CAAc;AAAErC,QAAAA;AAAF,OAAd;AACD,KAnDkB;;AAAA,SAqDnBsC,eArDmB,GAqDAb,GAAD,IAAS;AACzB,WAAKY,QAAL,CAAc;AAAEZ,QAAAA;AAAF,OAAd;AACD,KAvDkB;;AAAA,SAyDnBc,mBAzDmB,GAyDIb,OAAD,IAAa;AACjC,WAAKW,QAAL,CAAc;AAAEX,QAAAA;AAAF,OAAd;AACD,KA3DkB;;AAAA,SA6DnBc,gBA7DmB,GA6DCb,IAAD,IAAU;AAC3B,WAAKU,QAAL,CAAc;AAAEV,QAAAA;AAAF,OAAd;AACD,KA/DkB;;AAAA,SAiEnBc,oBAjEmB,GAiEKb,QAAD,IAAc;AACnC,WAAKS,QAAL,CAAc;AAAET,QAAAA;AAAF,OAAd;AACD,KAnEkB;;AAAA,SAqEnBc,kBArEmB,GAqEGC,GAAD,IAAS;AAC5B,WAAKN,QAAL,CAAc;AAAEM,QAAAA;AAAF,OAAd;AACD,KAvEkB;;AAEjB,SAAKC,KAAL,GAAa;AACX5C,MAAAA,GAAG,EAAE,KADM;AAEXyB,MAAAA,GAAG,EAAE,KAFM;AAGXC,MAAAA,OAAO,EAAE,MAHE;AAIXE,MAAAA,QAAQ,EAAE,MAJC;AAKXD,MAAAA,IAAI,EAAE,GALK;AAMXkB,MAAAA,SAAS,EAAE,CACT;AAAEC,QAAAA,EAAE,EAAE,CAAN;AAASC,QAAAA,GAAG,EAAE,aAAd;AAA6BC,QAAAA,IAAI,EAAE,MAAnC;AAA2CC,QAAAA,IAAI,EAAE;AAAjD,OADS,EAET;AAAEH,QAAAA,EAAE,EAAE,CAAN;AAASC,QAAAA,GAAG,EAAE,kBAAd;AAAkCC,QAAAA,IAAI,EAAE,MAAxC;AAAgDC,QAAAA,IAAI,EAAE;AAAtD,OAFS,EAGT;AACEH,QAAAA,EAAE,EAAE,CADN;AAEEC,QAAAA,GAAG,EAAE,iBAFP;AAGEC,QAAAA,IAAI,EAAE,GAHR;AAIEC,QAAAA,IAAI,EAAE;AAJR,OAHS,CANA;AAgBXC,MAAAA,KAAK,EAAE,CACL;AACEJ,QAAAA,EAAE,EAAE,CADN;AAEEC,QAAAA,GAAG,EAAE,mBAFP;AAGEI,QAAAA,MAAM,EAAE,sBAHV;AAIEC,QAAAA,IAAI,EAAE,EAJR;AAKEC,QAAAA,IAAI,EAAE,kDALR;AAMEC,QAAAA,QAAQ,EAAE;AANZ,OADK,EASL;AACER,QAAAA,EAAE,EAAE,CADN;AAEEC,QAAAA,GAAG,EAAE,QAFP;AAGEI,QAAAA,MAAM,EAAE,mBAHV;AAIEC,QAAAA,IAAI,EAAE,GAJR;AAKEC,QAAAA,IAAI,EAAE,EALR;AAMEC,QAAAA,QAAQ,EAAE;AANZ,OATK,EAiBL;AACER,QAAAA,EAAE,EAAE,CADN;AAEEC,QAAAA,GAAG,EAAE,mBAFP;AAGEI,QAAAA,MAAM,EAAE,EAHV;AAIEC,QAAAA,IAAI,EAAE,EAJR;AAKEC,QAAAA,IAAI,EAAE,EALR;AAMEC,QAAAA,QAAQ,EAAE;AANZ,OAjBK,CAwBF;AAxBE;AAhBI,KAAb;AA2CD;AACD;;AACA;;AACA;;;AAwBA;;AACA;;AACA;AACAC,EAAAA,MAAM,GAAG;AACP,UAAMvD,GAAG,GAAG,KAAK4C,KAAL,CAAW5C,GAAvB;AACA,UAAMyB,GAAG,GAAG,KAAKmB,KAAL,CAAWnB,GAAvB;AACA,UAAMC,OAAO,GAAG,KAAKkB,KAAL,CAAWlB,OAA3B;AACA,UAAMC,IAAI,GAAG,KAAKiB,KAAL,CAAWjB,IAAxB;AACA,UAAMC,QAAQ,GAAG,KAAKgB,KAAL,CAAWhB,QAA5B;AACA,UAAMe,GAAG,GAAGnB,eAAe,CAACxB,GAAD,EAAMyB,GAAN,EAAWC,OAAX,EAAoBC,IAApB,EAA0BC,QAA1B,CAA3B;AACA;AAAA;AACE;AACA;AAAA,gCACE;AAAK,UAAA,SAAS,EAAC,SAAf;AAAA,kCACE;AAAK,YAAA,SAAS,EAAC,iDAAf;AAAA,mCACE;AAAA,gQAI4C,GAJ5C,eAKE;AAAG,gBAAA,IAAI,EAAC,gDAAR;AAAA,2BACG,GADH;AAAA;AAAA;AAAA;AAAA;AAAA,sBALF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBADF,eAaE;AAAK,YAAA,SAAS,EAAC,uBAAf;AAAA,mCACE;AAAQ,cAAA,OAAO,EAAE,KAAK4B,UAAtB;AAAkC,cAAA,SAAS,EAAC,uBAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBAbF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAoBE;AAAK,UAAA,SAAS,EAAC,SAAf;AAAA,kCACE;AAAK,YAAA,SAAS,EAAC,aAAf;AAAA,mCAEE,QAAC,OAAD;AAEE,cAAA,IAAI,EAAE,KAAKZ,KAAL,CAAWM,KAAX,CAAiB,CAAjB,CAFR;AAGE,cAAA,aAAa,EAAE,KAAKd,eAHtB;AAIE,cAAA,GAAG,EAAEpC;AAJP,eACO,CADP;AAAA;AAAA;AAAA;AAAA;AAFF;AAAA;AAAA;AAAA;AAAA,kBADF,eAWE;AAAK,YAAA,SAAS,EAAC,QAAf;AAAA,mCACE,QAAC,OAAD;AAEE,cAAA,IAAI,EAAE,KAAK4C,KAAL,CAAWM,KAAX,CAAiB,CAAjB,CAFR;AAGE,cAAA,aAAa,EAAE,KAAKZ,eAHtB;AAIE,cAAA,GAAG,EAAEb;AAJP,eACO,CADP;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBAXF,eAmBE;AAAK,YAAA,SAAS,EAAC,QAAf;AAAA,mCAEE,QAAC,QAAD;AAEE,cAAA,QAAQ,EAAE,KAAKmB,KAAL,CAAWC,SAAX,CAAqB,CAArB,CAFZ;AAGE,cAAA,iBAAiB,EAAE,KAAKN;AAH1B,eACO,CADP;AAAA;AAAA;AAAA;AAAA;AAFF;AAAA;AAAA;AAAA;AAAA,kBAnBF;AAAA;AAAA;AAAA;AAAA;AAAA,gBApBF,eAgDE;AAAK,UAAA,SAAS,EAAC,SAAf;AAAA,kCAEE;AAAK,YAAA,SAAS,EAAC,aAAf;AAAA,mCACE,QAAC,OAAD;AAEE,cAAA,IAAI,EAAE,KAAKK,KAAL,CAAWM,KAAX,CAAiB,CAAjB,CAFR;AAGE,cAAA,iBAAiB,EAAE,KAAKR,kBAH1B;AAIE,cAAA,GAAG,EAAEC;AAJP,eACO,CADP;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBAFF,eAUE;AAAK,YAAA,SAAS,EAAC,QAAf;AAAA,mCAEE,QAAC,QAAD;AAEE,cAAA,QAAQ,EAAE,KAAKC,KAAL,CAAWC,SAAX,CAAqB,CAArB,CAFZ;AAGE,cAAA,iBAAiB,EAAE,KAAKJ;AAH1B,eACO,CADP;AAAA;AAAA;AAAA;AAAA;AAFF;AAAA;AAAA;AAAA;AAAA,kBAVF,eAkBE;AAAK,YAAA,SAAS,EAAC,QAAf;AAAA,mCAEE,QAAC,QAAD;AAEE,cAAA,QAAQ,EAAE,KAAKG,KAAL,CAAWC,SAAX,CAAqB,CAArB,CAFZ;AAGE,cAAA,iBAAiB,EAAE,KAAKL;AAH1B,eACO,CADP;AAAA;AAAA;AAAA;AAAA;AAFF;AAAA;AAAA;AAAA;AAAA,kBAlBF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAhDF,eA4EE;AAAI,UAAA,SAAS,EAAC;AAAd;AAAA;AAAA;AAAA;AAAA,gBA5EF;AAAA;AAAA;AAAA;AAAA;AAAA;AAFF;AAiFD;;AApKsC;;AAuKzC,eAAeP,UAAf","sourcesContent":["/* ------------------------------------------------------------------------------------------------------------------ */\n/*                                                       imports                                                      */\n/* ------------------------------------------------------------------------------------------------------------------ */\n// eslint-disable-next-line\nimport React, { Component } from \"react\";\nimport Selector from \"./selector\";\nimport NumForm from \"./numform\";\n/* ------------------------------------------------------------------------------------------------------------------ */\n/*                                                  rounding function                                                 */\n/* ------------------------------------------------------------------------------------------------------------------ */\n/*round value to appropriate count of significant digits based on absolute error*/\nfunction rnSig(val, absErr) {\n  const t = Math.floor(Math.log10(0.5 / absErr)); //calc number of fractional significant digits based on absolute error\n  const ord = Math.floor(Math.log10(val)); //calc order of magnitude of the number\n  // const sig = ord + t + 1; //calc number of significant digits by adding t to order of magnitude of the number\n  /* initiate variables ----------------------------------------------------------------------------------------------- */\n  let valSci = val,\n    errSci = absErr,\n    valStr = val,\n    valStrSci = val,\n    errStr = absErr,\n    errStrSci = absErr;\n  /* calculate base of scientific notation ---------------------------------------------------------------------------- */\n  valSci = valSci / 10 ** ord;\n  errSci = errSci / 10 ** ord;\n  /* rounded value in decimal notation -------------------------------------------------------------------------------- */\n  valStr = Math.round(valStr / 10 ** -t) * 10 ** -t;\n  /* rounded value in scientific notation ----------------------------------------------------------------------------- */\n  valStrSci = Math.round(valSci / 10 ** (-t - ord)) * 10 ** (-t - ord);\n  valStrSci = valStrSci.toFixed(t + ord + 1);\n  /* rounded error in decimal notation -------------------------------------------------------------------------------- */\n  errStr = Math.round(errStr / 10 ** -(t + 1)) * 10 ** -(t + 1);\n  /* rounded error in scientific notation ----------------------------------------------------------------------------- */\n  errStrSci = errSci.toFixed(t + ord + 1);\n  /* where abs. error in decimal range, add \"0\" to match decimal places of the error ---------------------------------- */\n  if (t >= 0) {\n    valStr = valStr.toFixed(t + 1);\n    errStr = errStr.toFixed(t + 1);\n  }\n  /* return object with formatted values ------------------------------------------------------------------------------ */\n  return {\n    valStr: valStr,\n    errStr: errStr,\n    valStrSci: valStrSci,\n    errStrSci: errStrSci,\n    ord: ord === Infinity ? 0 : ord,\n  };\n}\n/* ------------------------------------------------------------------------------------------------------------------ */\n/*                                                  verify user input                                                 */\n/* ------------------------------------------------------------------------------------------------------------------ */\nfunction CheckNumberInput(inp) {\n  inp = inp.replace(/,/g, \".\");\n  console.log(inp);\n  console.log(inp.match(/\\./g || []).length);\n  // console.log(\"....234sdf\".match(/./g).length);\n\n  inp = parseFloat(inp);\n}\n/* ------------------------------------------------------------------------------------------------------------------ */\n/*                                              number-string constructor                                             */\n/* ------------------------------------------------------------------------------------------------------------------ */\nfunction ConstructString(val, err, errType, sign, notation) {\n  /* convert user ipnut to float -------------------------------------------------------------------------------------- */\n  val = CheckNumberInput(val);\n  err = CheckNumberInput(err);\n\n  /* check if inputs can be read as numbers --------------------------------------------------------------------------- */\n  if (isNaN(val) || isNaN(err)) {\n    return \"Please specify number and error: i.e. 1234 and 0.04\";\n  }\n\n  let absErr = 0,\n    resString = \"\";\n\n  /* calculate relative and absolute error ---------------------------------------------------------------------------- */\n  if (errType === \"Rel.\") {\n    absErr = val * err;\n  } else {\n    absErr = err;\n  }\n\n  /* check for absErr greater than a number and if absErr is not 0 ---------------------------------------------------- */\n  if (absErr > 0 && absErr < val) {\n    /* read data from object returned by function rnSig ----------------------------------------------------------------- */\n    const num = rnSig(val, absErr);\n    const valStr = num.valStr,\n      valStrSci = num.valStrSci,\n      errStr = num.errStr,\n      errStrSci = num.errStrSci,\n      errDigits = (errStr / 10 ** Math.floor(Math.log10(errStr))).toFixed(0), //absolute error in form of string of least significant digits\n      ord = num.ord;\n\n    /* construct number representation based on user-selected settings -------------------------------------------------- */\n    if (sign === \"±\") {\n      if (notation === \"Sci.\") {\n        resString =\n          \"(\" +\n          valStrSci +\n          sign +\n          errStrSci +\n          \")e\" +\n          (ord >= 0 ? \"+\" : \"\") +\n          ord;\n      } else {\n        resString = valStr + sign + errStr;\n      }\n    } else {\n      if (notation === \"Sci.\") {\n        resString =\n          valStrSci + \"(\" + errDigits + \")e\" + (ord >= 0 ? \"+\" : \"\") + ord;\n      } else {\n        resString = valStr + \"(\" + errDigits + \")\";\n      }\n    }\n    return resString;\n  } else {\n    return \"Number shall be greater than its absolute error!\";\n  }\n}\n/* ------------------------------------------------------------------------------------------------------------------ */\n/*                                              main calculator component                                             */\n/* ------------------------------------------------------------------------------------------------------------------ */\nclass Calculator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      val: \"123\",\n      err: \"0.1\",\n      errType: \"Rel.\",\n      notation: \"Std.\",\n      sign: \"±\",\n      selectors: [\n        { id: 1, lab: \"Error type:\", opt1: \"Rel.\", opt2: \"Abs.\" },\n        { id: 2, lab: \"Number notation:\", opt1: \"Std.\", opt2: \"Sci.\" },\n        {\n          id: 3,\n          lab: \"Error notation:\",\n          opt1: \"±\",\n          opt2: \"()\",\n        },\n      ],\n      forms: [\n        {\n          id: 1,\n          lab: \"Number to format:\",\n          plHold: \"i.e. 1.23E+3 or 1230\",\n          prep: \"\",\n          mess: \"Use dot [.] or comma [,] as a decimal separator.\",\n          readonly: 0,\n        },\n        {\n          id: 2,\n          lab: \"Error:\",\n          plHold: \"i.e. 3E-2 or 0.03\",\n          prep: \"±\",\n          mess: \"\",\n          readonly: 0,\n        },\n        {\n          id: 3,\n          lab: \"Formatted number:\",\n          plHold: \"\",\n          prep: \"\",\n          mess: \"\",\n          readonly: 1,\n        }, //inValue: \"\",\n      ],\n    };\n  }\n  /* ------------------------------------------------------------------------------------------------------------------ */\n  /*                                                   event handlers                                                   */\n  /* ------------------------------------------------------------------------------------------------------------------ */\n  handleValChange = (val) => {\n    this.setState({ val });\n  };\n\n  handleErrChange = (err) => {\n    this.setState({ err });\n  };\n\n  handleErrTypeChange = (errType) => {\n    this.setState({ errType });\n  };\n\n  handleSignChange = (sign) => {\n    this.setState({ sign });\n  };\n\n  handleNotationChange = (notation) => {\n    this.setState({ notation });\n  };\n\n  handleResultChange = (str) => {\n    this.setState({ str });\n  };\n  /* ------------------------------------------------------------------------------------------------------------------ */\n  /*                                                    render method                                                   */\n  /* ------------------------------------------------------------------------------------------------------------------ */\n  render() {\n    const val = this.state.val;\n    const err = this.state.err;\n    const errType = this.state.errType;\n    const sign = this.state.sign;\n    const notation = this.state.notation;\n    const str = ConstructString(val, err, errType, sign, notation);\n    return (\n      //IMPORTANT! Bulma's grid system is used to compy with Wordpress theme. Bootstrap is used for styling components.\n      <div>\n        <div className=\"columns\">\n          <div className=\"column is-9 has-text-justified is-hidden-mobile\">\n            <p>\n              This tool formats a given number so that it is rounded to an\n              appropriate count of significant digits based on the given\n              uncertainty of the value. If you are interested in the formal and\n              mathematical background, please visit the{\" \"}\n              <a href=\"https://mmielcarek.com/en/mat/rounding_numbers\">\n                {\" \"}\n                blog.\n              </a>\n            </p>\n          </div>\n          <div className=\"column has-text-right\">\n            <button onClick={this.handleCalc} className=\"btn btn-warning w-100\">\n              Clear input\n            </button>\n          </div>\n        </div>\n        <div className=\"columns\">\n          <div className=\"column is-6\">\n            {/*} INPUT - NUMBER --------------------------------------------------------------------------------------------------- */}\n            <NumForm\n              key={0}\n              form={this.state.forms[0]}\n              onInputChange={this.handleValChange}\n              inp={val}\n            ></NumForm>\n          </div>\n          {/* INPUT - ERROR ---------------------------------------------------------------------------------------------------- */}\n          <div className=\"column\">\n            <NumForm\n              key={1}\n              form={this.state.forms[1]}\n              onInputChange={this.handleErrChange}\n              inp={err}\n            ></NumForm>\n          </div>\n          <div className=\"column\">\n            {/*} SELECTOR - ERR --------------------------------------------------------------------------------------------------- */}\n            <Selector\n              key={0}\n              selector={this.state.selectors[0]}\n              onSelectionChange={this.handleErrTypeChange}\n            ></Selector>\n          </div>\n        </div>\n        <div className=\"columns\">\n          {/*} INPUT - FORM. NUMBER --------------------------------------------------------------------------------------------- */}\n          <div className=\"column is-6\">\n            <NumForm\n              key={2}\n              form={this.state.forms[2]}\n              onSelectionChange={this.handleResultChange}\n              inp={str}\n            ></NumForm>\n          </div>\n          <div className=\"column\">\n            {/*} SELECTOR - NUM NOTATION ------------------------------------------------------------------------------------------ */}\n            <Selector\n              key={1}\n              selector={this.state.selectors[1]}\n              onSelectionChange={this.handleNotationChange}\n            ></Selector>\n          </div>\n          <div className=\"column\">\n            {/*} SELECTORS - ERR NOTATION ----------------------------------------------------------------------------------------- */}\n            <Selector\n              key={2}\n              selector={this.state.selectors[2]}\n              onSelectionChange={this.handleSignChange}\n            ></Selector>\n          </div>\n        </div>\n        {/* DELETE BTN ------------------------------------------------------------------------------------------------------- */}\n        <hr className=\"w-100\" />\n      </div>\n    );\n  }\n}\n\nexport default Calculator;\n"]},"metadata":{},"sourceType":"module"}