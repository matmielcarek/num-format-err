{"ast":null,"code":"var _jsxFileName = \"/Users/mateuszmielcarek/Documents/public_html/en/mat/wp-content/reactpress/apps/num-format-err/src/components/calculator.jsx\";\nimport React, { Component } from \"react\";\nimport Selector from \"./selector\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Calculator extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      selectors: [{\n        id: 1,\n        lab: \"Error type\",\n        opt1: \"Relative\",\n        opt2: \"Absolute\"\n      }, {\n        id: 2,\n        lab: \"Number notation\",\n        opt1: \"Standard\",\n        opt2: \"Scientific\"\n      }, {\n        id: 3,\n        lab: \"Error notation\",\n        opt1: \"Standard ±\",\n        opt2: \"Shorthand ()\"\n      }]\n    };\n  }\n\n  // Render method\n  render() {\n    return (\n      /*#__PURE__*/\n      // <div className=\"Container\">\n      // <div className=\"row\">\n      _jsxDEV(\"div\", {\n        className: \"col-sm-4\",\n        children: [this.state.selectors.map(selector => /*#__PURE__*/_jsxDEV(Selector, {\n          selector: selector\n        }, selector.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 11\n        }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.props.onDelete(this.props.counter.id) //onDelete is a property of Counter component called in Counters component.\n          // Here only the property onDelete of the counter, defined in counters component is called - <raising event handlers>\n          // The reference must be given as an arrow function, as we need to pass an id of the counter to be deleted.\n          // If instead of \"this.props.counter.id\" we would add 1, always counter of id 1 would be deleted.\n          ,\n          className: \"btn btn-danger m-2\",\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 7\n      }, this)\n    );\n  } // Method to change button classes on click to make it a selector.\n\n\n  changeButtonClass() {\n    let classes = \"btn btn-sm btn-\";\n    classes += this.props.counter.value === 0 ? \"primary\" : \"secondary\"; // If counter value is 0 add \"Warning\", else add \"primary\".\n\n    return classes;\n  } // Method to format counter based on value.\n\n\n  formatCount() {\n    // Object destructuring - picking a single property of an object and store it in a const.\n    const {\n      value: value\n    } = this.props.counter;\n    return value === 0 ? \"Zero\" : value; // Instead of plain text \"Zero\" it is also possible to return a JSX expression: <h1>Zero</h1>.\n    // Constant (const) can also store JSX expression. const x = <h1>Zero</h1>\n  } ///////////////////////////////////////////////////////////\n  //   //[USAGE OF <componentDidMount>]\n  //   // Called after component is rendered into the DOM. Place to call data form the server.\n  //   componentDidMount() {\n  // //Ajax Call\n  //     this.setState({data from the server})\n  //   }\n\n\n}\n\nexport default Calculator;","map":{"version":3,"sources":["/Users/mateuszmielcarek/Documents/public_html/en/mat/wp-content/reactpress/apps/num-format-err/src/components/calculator.jsx"],"names":["React","Component","Selector","Calculator","state","selectors","id","lab","opt1","opt2","render","map","selector","props","onDelete","counter","changeButtonClass","classes","value","formatCount"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,YAArB;;;AAEA,MAAMC,UAAN,SAAyBH,KAAK,CAACC,SAA/B,CAAyC;AAAA;AAAA;AAAA,SACvCG,KADuC,GAC/B;AACNC,MAAAA,SAAS,EAAE,CACT;AAAEC,QAAAA,EAAE,EAAE,CAAN;AAASC,QAAAA,GAAG,EAAE,YAAd;AAA4BC,QAAAA,IAAI,EAAE,UAAlC;AAA8CC,QAAAA,IAAI,EAAE;AAApD,OADS,EAET;AAAEH,QAAAA,EAAE,EAAE,CAAN;AAASC,QAAAA,GAAG,EAAE,iBAAd;AAAiCC,QAAAA,IAAI,EAAE,UAAvC;AAAmDC,QAAAA,IAAI,EAAE;AAAzD,OAFS,EAGT;AACEH,QAAAA,EAAE,EAAE,CADN;AAEEC,QAAAA,GAAG,EAAE,gBAFP;AAGEC,QAAAA,IAAI,EAAE,YAHR;AAIEC,QAAAA,IAAI,EAAE;AAJR,OAHS;AADL,KAD+B;AAAA;;AAavC;AACAC,EAAAA,MAAM,GAAG;AACP;AAAA;AACE;AACA;AACA;AAAK,QAAA,SAAS,EAAC,UAAf;AAAA,mBACG,KAAKN,KAAL,CAAWC,SAAX,CAAqBM,GAArB,CAA0BC,QAAD,iBACxB,QAAC,QAAD;AAA4B,UAAA,QAAQ,EAAEA;AAAtC,WAAeA,QAAQ,CAACN,EAAxB;AAAA;AAAA;AAAA;AAAA,gBADD,CADH,eAIE;AACE,UAAA,OAAO,EAAE,MAAM,KAAKO,KAAL,CAAWC,QAAX,CAAoB,KAAKD,KAAL,CAAWE,OAAX,CAAmBT,EAAvC,CADjB,CAC6D;AAC3D;AACA;AACA;AAJF;AAKE,UAAA,SAAS,EAAC,oBALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AAHF;AAkBD,GAjCsC,CAmCvC;;;AACAU,EAAAA,iBAAiB,GAAG;AAClB,QAAIC,OAAO,GAAG,iBAAd;AACAA,IAAAA,OAAO,IAAI,KAAKJ,KAAL,CAAWE,OAAX,CAAmBG,KAAnB,KAA6B,CAA7B,GAAiC,SAAjC,GAA6C,WAAxD,CAFkB,CAEmD;;AACrE,WAAOD,OAAP;AACD,GAxCsC,CA0CvC;;;AACAE,EAAAA,WAAW,GAAG;AACZ;AACA,UAAM;AAAED,MAAAA,KAAK,EAAEA;AAAT,QAAmB,KAAKL,KAAL,CAAWE,OAApC;AACA,WAAOG,KAAK,KAAK,CAAV,GAAc,MAAd,GAAuBA,KAA9B,CAHY,CAGyB;AACrC;AACD,GAhDsC,CAkDvC;AACA;AACA;AACA;AACA;AACA;AACA;;;AAxDuC;;AA2DzC,eAAef,UAAf","sourcesContent":["import React, { Component } from \"react\";\nimport Selector from \"./selector\";\n\nclass Calculator extends React.Component {\n  state = {\n    selectors: [\n      { id: 1, lab: \"Error type\", opt1: \"Relative\", opt2: \"Absolute\" },\n      { id: 2, lab: \"Number notation\", opt1: \"Standard\", opt2: \"Scientific\" },\n      {\n        id: 3,\n        lab: \"Error notation\",\n        opt1: \"Standard ±\",\n        opt2: \"Shorthand ()\",\n      },\n    ],\n  };\n  // Render method\n  render() {\n    return (\n      // <div className=\"Container\">\n      // <div className=\"row\">\n      <div className=\"col-sm-4\">\n        {this.state.selectors.map((selector) => (\n          <Selector key={selector.id} selector={selector}></Selector>\n        ))}\n        <button\n          onClick={() => this.props.onDelete(this.props.counter.id)} //onDelete is a property of Counter component called in Counters component.\n          // Here only the property onDelete of the counter, defined in counters component is called - <raising event handlers>\n          // The reference must be given as an arrow function, as we need to pass an id of the counter to be deleted.\n          // If instead of \"this.props.counter.id\" we would add 1, always counter of id 1 would be deleted.\n          className=\"btn btn-danger m-2\"\n        >\n          Delete\n        </button>\n      </div>\n    );\n  }\n\n  // Method to change button classes on click to make it a selector.\n  changeButtonClass() {\n    let classes = \"btn btn-sm btn-\";\n    classes += this.props.counter.value === 0 ? \"primary\" : \"secondary\"; // If counter value is 0 add \"Warning\", else add \"primary\".\n    return classes;\n  }\n\n  // Method to format counter based on value.\n  formatCount() {\n    // Object destructuring - picking a single property of an object and store it in a const.\n    const { value: value } = this.props.counter;\n    return value === 0 ? \"Zero\" : value; // Instead of plain text \"Zero\" it is also possible to return a JSX expression: <h1>Zero</h1>.\n    // Constant (const) can also store JSX expression. const x = <h1>Zero</h1>\n  }\n\n  ///////////////////////////////////////////////////////////\n  //   //[USAGE OF <componentDidMount>]\n  //   // Called after component is rendered into the DOM. Place to call data form the server.\n  //   componentDidMount() {\n  // //Ajax Call\n  //     this.setState({data from the server})\n  //   }\n}\n\nexport default Calculator;\n"]},"metadata":{},"sourceType":"module"}