{"ast":null,"code":"import _classCallCheck from\"/Users/mateuszmielcarek/Documents/public_html/en/mat/wp-content/reactpress/apps/counter-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/mateuszmielcarek/Documents/public_html/en/mat/wp-content/reactpress/apps/counter-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/mateuszmielcarek/Documents/public_html/en/mat/wp-content/reactpress/apps/counter-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/mateuszmielcarek/Documents/public_html/en/mat/wp-content/reactpress/apps/counter-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from\"react\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Counter=/*#__PURE__*/function(_React$Component){_inherits(Counter,_React$Component);var _super=_createSuper(Counter);function Counter(){_classCallCheck(this,Counter);return _super.apply(this,arguments);}_createClass(Counter,[{key:\"render\",value:///////////////////////////////////////////////////////////\n//[LOCAL STATE OF COMPONENT - WHEN NOT INTENDED TO BE MODIFIED]\n//   state = { //local state- cannot be updated do \"Reset\" does not work.\n//     //state includes data that is local or private to the component\n//     //other components cannot access to that state\n//     //component may not have state, it may take all the data from props\n//     value: this.props.counter.value,\n//     //props includes data that we give to the component\n//     //props is read-only - we cannot assign to the value of the object\n//     //to modiufy something we need to reach the state\n//     //!! The component that owns a piece of the state, should be the one modifying it!!\n//     //!! So, in this case the Counters component owns the state \"counters\" so it should modify it!!\n//     // Cut, the state is private to the component, so how to modity it with another (Counter) component?\n//     // Counter component will raise the event\n//   };\n///////////////////////////////////////////////////////////\n//   //[RENDERING LIST OF COMPONENTS (TAGS)]\n//   state = {\n//     tags: [\"tag1\", \"tag2\", \"tag3\"],\n//   };\n//     renderTags() {\n//       if (this.state.tags.length === 0) return <p>There are no tags!</p>;\n//       return (\n//         <ul>\n//           {this.state.tags.map((tag) => (\n//             <li key={tag}>{tag}</li>\n//           ))}\n//         </ul>\n//       );\n//     }\n///////////////////////////////////////////////////////////\n//   //[RENDERING LIST OF COMPONENTS (TAGS)]\n//   constructor() {\n//     super(); //to have the\n//     this.handleIncrement = this.handleIncrement.bind(this);\n//   }\n//Functions in javaScript are objects so they have objects and methods.\n//Above is done to get access to the Counter object in function.\n//We will be able to update \"state\" property.\n//Solution to bind event handlers to \"This\"\n//There is another way of doing this:\n//   handleIncrement() {\n//     console.log(\"Increment clicked\", this);\n//   }\n///////////////////////////////////////////////////////////\n//   //[CONTROLLED COMPONENT]\n//Component is controlled by its parent - no local state should exist!\n//Same in Counters component.\n// Render method\nfunction render(){var _this=this;// console.log(\"props\", this.props);\nreturn/*#__PURE__*/ (/* Required so that Babel knows that the single html tag that needs to be rendered (with children inside).*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"span\",{className:this.getBadgeClasses(),children:this.formatCount()}),/*#__PURE__*/_jsxs(\"div\",{className:\"btn-group\",children:[/*#__PURE__*/_jsx(\"button\",{//   onClick={() => this.handleIncrement(product)} // passing arguments to event handlers - pass arrow function to event identifier\nonClick:function onClick(){_this.props.onIncrement(_this.props.counter);// This is here instead of the local state. Parent controls the component.\n},className:\"btn btn-secondary btn-sm col-3 me-2\",children:\"+\"}),/*#__PURE__*/_jsx(\"button\",{onClick:function onClick(){_this.props.onDecrement(_this.props.counter);},className:\"btn btn-secondary btn-sm col-3\",children:\"-\"})]}),/*#__PURE__*/_jsx(\"button\",{onClick:function onClick(){return _this.props.onDelete(_this.props.counter.id);}//onDelete is a property of Counter component called in Counters component.\n// Here only the property onDelete of the counter, defined in counters component is called - <raising event handlers>\n// The reference must be given as an arrow function, as we need to pass an id of the counter to be deleted.\n// If instead of \"this.props.counter.id\" we would add 1, always counter of id 1 would be deleted.\n,className:\"btn btn-danger btn-sm m-2\",children:\"Delete\"}),\" \"]}));}// Method to change badge classes based on value of the counter.\n},{key:\"getBadgeClasses\",value:function getBadgeClasses(){var classes=\"badge m-2 bg-\";classes+=this.props.counter.value===0?\"warning\":\"primary\";// If counter value is 0 add \"Warning\", else add \"primary\".\nreturn classes;}// Method to format counter based on value.\n},{key:\"formatCount\",value:function formatCount(){// Object destructuring - picking a single property of an object and store it in a const.\nvar value=this.props.counter.value;return value===0?\"Zero\":value;// Instead of plain text \"Zero\" it is also possible to return a JSX expression: <h1>Zero</h1>.\n// Constant (const) can also store JSX expression. const x = <h1>Zero</h1>\n}///////////////////////////////////////////////////////////\n//   //[USAGE OF <componentDidMount>]\n//   // Called after component is rendered into the DOM. Place to call data form the server.\n//   componentDidMount() {\n// //Ajax Call\n//     this.setState({data from the server})\n//   }\n}]);return Counter;}(React.Component);export default Counter;","map":{"version":3,"sources":["/Users/mateuszmielcarek/Documents/public_html/en/mat/wp-content/reactpress/apps/counter-app/src/components/counter.jsx"],"names":["React","Component","Counter","getBadgeClasses","formatCount","props","onIncrement","counter","onDecrement","onDelete","id","classes","value"],"mappings":"wqBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,C,2FAEMC,CAAAA,O,8OACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA,iBAAS,gBACP;AACA,oBACE,6GACA,oCAGE,aAAM,SAAS,CAAE,KAAKC,eAAL,EAAjB,UAEG,KAAKC,WAAL,EAFH,EAHF,cAOE,aAAK,SAAS,CAAC,WAAf,wBACE,eACE;AACA,OAAO,CAAE,kBAAM,CACb,KAAI,CAACC,KAAL,CAAWC,WAAX,CAAuB,KAAI,CAACD,KAAL,CAAWE,OAAlC,EAA4C;AAC7C,CAJH,CAKE,SAAS,CAAC,qCALZ,eADF,cAUE,eACE,OAAO,CAAE,kBAAM,CACb,KAAI,CAACF,KAAL,CAAWG,WAAX,CAAuB,KAAI,CAACH,KAAL,CAAWE,OAAlC,EACD,CAHH,CAIE,SAAS,CAAC,gCAJZ,eAVF,GAPF,cA0BE,eACE,OAAO,CAAE,yBAAM,CAAA,KAAI,CAACF,KAAL,CAAWI,QAAX,CAAoB,KAAI,CAACJ,KAAL,CAAWE,OAAX,CAAmBG,EAAvC,CAAN,EAAkD;AAC3D;AACA;AACA;AAJF,CAKE,SAAS,CAAC,2BALZ,oBA1BF,CAmCuE,GAnCvE,GAFF,EA0CD,CAED;+BACA,0BAAkB,CAChB,GAAIC,CAAAA,OAAO,CAAG,eAAd,CACAA,OAAO,EAAI,KAAKN,KAAL,CAAWE,OAAX,CAAmBK,KAAnB,GAA6B,CAA7B,CAAiC,SAAjC,CAA6C,SAAxD,CAAmE;AACnE,MAAOD,CAAAA,OAAP,CACD,CAED;2BACA,sBAAc,CACZ;AACA,GAAeC,CAAAA,KAAf,CAAyB,KAAKP,KAAL,CAAWE,OAApC,CAAQK,KAAR,CACA,MAAOA,CAAAA,KAAK,GAAK,CAAV,CAAc,MAAd,CAAuBA,KAA9B,CAAqC;AACrC;AACD,CAED;AACA;AACA;AACA;AACA;AACA;AACA;qBAvHoBZ,KAAK,CAACC,S,EA0H5B,cAAeC,CAAAA,OAAf","sourcesContent":["import React, { Component } from \"react\";\n\nclass Counter extends React.Component {\n  ///////////////////////////////////////////////////////////\n  //[LOCAL STATE OF COMPONENT - WHEN NOT INTENDED TO BE MODIFIED]\n  //   state = { //local state- cannot be updated do \"Reset\" does not work.\n  //     //state includes data that is local or private to the component\n  //     //other components cannot access to that state\n  //     //component may not have state, it may take all the data from props\n  //     value: this.props.counter.value,\n  //     //props includes data that we give to the component\n  //     //props is read-only - we cannot assign to the value of the object\n  //     //to modiufy something we need to reach the state\n\n  //     //!! The component that owns a piece of the state, should be the one modifying it!!\n  //     //!! So, in this case the Counters component owns the state \"counters\" so it should modify it!!\n  //     // Cut, the state is private to the component, so how to modity it with another (Counter) component?\n  //     // Counter component will raise the event\n  //   };\n  ///////////////////////////////////////////////////////////\n  //   //[RENDERING LIST OF COMPONENTS (TAGS)]\n  //   state = {\n  //     tags: [\"tag1\", \"tag2\", \"tag3\"],\n  //   };\n  //     renderTags() {\n  //       if (this.state.tags.length === 0) return <p>There are no tags!</p>;\n  //       return (\n  //         <ul>\n  //           {this.state.tags.map((tag) => (\n  //             <li key={tag}>{tag}</li>\n  //           ))}\n  //         </ul>\n  //       );\n  //     }\n  ///////////////////////////////////////////////////////////\n  //   //[RENDERING LIST OF COMPONENTS (TAGS)]\n  //   constructor() {\n  //     super(); //to have the\n  //     this.handleIncrement = this.handleIncrement.bind(this);\n  //   }\n  //Functions in javaScript are objects so they have objects and methods.\n  //Above is done to get access to the Counter object in function.\n  //We will be able to update \"state\" property.\n  //Solution to bind event handlers to \"This\"\n  //There is another way of doing this:\n  //   handleIncrement() {\n  //     console.log(\"Increment clicked\", this);\n  //   }\n  ///////////////////////////////////////////////////////////\n  //   //[CONTROLLED COMPONENT]\n  //Component is controlled by its parent - no local state should exist!\n  //Same in Counters component.\n\n  // Render method\n  render() {\n    // console.log(\"props\", this.props);\n    return (\n      /* Required so that Babel knows that the single html tag that needs to be rendered (with children inside).*/\n      <div>\n        {/* <h4>{this.props.id}</h4> //this is how to render some complex elements to Counter, the child of the Counters component\n        {this.props.children} */}\n        <span className={this.getBadgeClasses()}>\n          {/* Could also add style=\"some style\" */}\n          {this.formatCount()}\n        </span>\n        <div className=\"btn-group\">\n          <button\n            //   onClick={() => this.handleIncrement(product)} // passing arguments to event handlers - pass arrow function to event identifier\n            onClick={() => {\n              this.props.onIncrement(this.props.counter); // This is here instead of the local state. Parent controls the component.\n            }}\n            className=\"btn btn-secondary btn-sm col-3 me-2\"\n          >\n            +\n          </button>\n          <button\n            onClick={() => {\n              this.props.onDecrement(this.props.counter);\n            }}\n            className=\"btn btn-secondary btn-sm col-3\"\n          >\n            -\n          </button>\n        </div>\n        <button\n          onClick={() => this.props.onDelete(this.props.counter.id)} //onDelete is a property of Counter component called in Counters component.\n          // Here only the property onDelete of the counter, defined in counters component is called - <raising event handlers>\n          // The reference must be given as an arrow function, as we need to pass an id of the counter to be deleted.\n          // If instead of \"this.props.counter.id\" we would add 1, always counter of id 1 would be deleted.\n          className=\"btn btn-danger btn-sm m-2\"\n        >\n          Delete\n        </button>\n        {/* {this.state.tags.length === 0 && \"please create a new tag!\"} */}{\" \"}\n        {/* Simplified if else statement with &&*/}\n        {/* {this.renderTags()} */}\n      </div>\n    );\n  }\n\n  // Method to change badge classes based on value of the counter.\n  getBadgeClasses() {\n    let classes = \"badge m-2 bg-\";\n    classes += this.props.counter.value === 0 ? \"warning\" : \"primary\"; // If counter value is 0 add \"Warning\", else add \"primary\".\n    return classes;\n  }\n\n  // Method to format counter based on value.\n  formatCount() {\n    // Object destructuring - picking a single property of an object and store it in a const.\n    const { value: value } = this.props.counter;\n    return value === 0 ? \"Zero\" : value; // Instead of plain text \"Zero\" it is also possible to return a JSX expression: <h1>Zero</h1>.\n    // Constant (const) can also store JSX expression. const x = <h1>Zero</h1>\n  }\n\n  ///////////////////////////////////////////////////////////\n  //   //[USAGE OF <componentDidMount>]\n  //   // Called after component is rendered into the DOM. Place to call data form the server.\n  //   componentDidMount() {\n  // //Ajax Call\n  //     this.setState({data from the server})\n  //   }\n}\n\nexport default Counter;\n"]},"metadata":{},"sourceType":"module"}