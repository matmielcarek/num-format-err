{"ast":null,"code":"var _jsxFileName = \"/Users/mateuszmielcarek/Documents/public_html/en/mat/wp-content/reactpress/apps/num-format-err/src/components/counter.jsx\";\nimport React, { Component } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Counter extends React.Component {\n  ///////////////////////////////////////////////////////////\n  //[LOCAL STATE OF COMPONENT - WHEN NOT INTENDED TO BE MODIFIED]\n  //   state = { //local state- cannot be updated do \"Reset\" does not work.\n  //     //state includes data that is local or private to the component\n  //     //other components cannot access to that state\n  //     //component may not have state, it may take all the data from props\n  //     value: this.props.counter.value,\n  //     //props includes data that we give to the component\n  //     //props is read-only - we cannot assign to the value of the object\n  //     //to modiufy something we need to reach the state\n  //     //!! The component that owns a piece of the state, should be the one modifying it!!\n  //     //!! So, in this case the Counters component owns the state \"counters\" so it should modify it!!\n  //     // Cut, the state is private to the component, so how to modity it with another (Counter) component?\n  //     // Counter component will raise the event\n  //   };\n  ///////////////////////////////////////////////////////////\n  //   //[RENDERING LIST OF COMPONENTS (TAGS)]\n  //   state = {\n  //     tags: [\"tag1\", \"tag2\", \"tag3\"],\n  //   };\n  //     renderTags() {\n  //       if (this.state.tags.length === 0) return <p>There are no tags!</p>;\n  //       return (\n  //         <ul>\n  //           {this.state.tags.map((tag) => (\n  //             <li key={tag}>{tag}</li>\n  //           ))}\n  //         </ul>\n  //       );\n  //     }\n  ///////////////////////////////////////////////////////////\n  //   //[RENDERING LIST OF COMPONENTS (TAGS)]\n  //   constructor() {\n  //     super(); //to have the\n  //     this.handleIncrement = this.handleIncrement.bind(this);\n  //   }\n  //Functions in javaScript are objects so they have objects and methods.\n  //Above is done to get access to the Counter object in function.\n  //We will be able to update \"state\" property.\n  //Solution to bind event handlers to \"This\"\n  //There is another way of doing this:\n  //   handleIncrement() {\n  //     console.log(\"Increment clicked\", this);\n  //   }\n  ///////////////////////////////////////////////////////////\n  //   //[CONTROLLED COMPONENT]\n  //Component is controlled by its parent - no local state should exist!\n  //Same in Counters component.\n  // Render method\n  render() {\n    // console.log(\"props\", this.props);\n    return (\n      /*#__PURE__*/\n\n      /* Required so that Babel knows that the single html tag that needs to be rendered (with children inside).*/\n      _jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: this.handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Imi\\u0119:\", /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: this.state.value,\n              onChange: this.handleChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"submit\",\n            value: \"Wy\\u015Blij\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: this.getBadgeClasses(),\n          children: this.formatCount()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"btn-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            //   onClick={() => this.handleIncrement(product)} // passing arguments to event handlers - pass arrow function to event identifier\n            onClick: () => {\n              this.props.onIncrement(this.props.counter); // This is here instead of the local state. Parent controls the component.\n            },\n            className: \"btn btn-secondary btn-sm col-3 me-2\",\n            children: \"+\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              this.props.onDecrement(this.props.counter);\n            },\n            className: \"btn btn-secondary btn-sm col-3\",\n            children: \"-\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.props.onDelete(this.props.counter.id) //onDelete is a property of Counter component called in Counters component.\n          // Here only the property onDelete of the counter, defined in counters component is called - <raising event handlers>\n          // The reference must be given as an arrow function, as we need to pass an id of the counter to be deleted.\n          // If instead of \"this.props.counter.id\" we would add 1, always counter of id 1 would be deleted.\n          ,\n          className: \"btn btn-danger btn-sm m-2\",\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 9\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 7\n      }, this)\n    );\n  } // Method to change badge classes based on value of the counter.\n\n\n  getBadgeClasses() {\n    let classes = \"badge m-2 bg-\";\n    classes += this.props.counter.value === 0 ? \"warning\" : \"primary\"; // If counter value is 0 add \"Warning\", else add \"primary\".\n\n    return classes;\n  } // Method to format counter based on value.\n\n\n  formatCount() {\n    // Object destructuring - picking a single property of an object and store it in a const.\n    const {\n      value: value\n    } = this.props.counter;\n    return value === 0 ? \"Zero\" : value; // Instead of plain text \"Zero\" it is also possible to return a JSX expression: <h1>Zero</h1>.\n    // Constant (const) can also store JSX expression. const x = <h1>Zero</h1>\n  } ///////////////////////////////////////////////////////////\n  //   //[USAGE OF <componentDidMount>]\n  //   // Called after component is rendered into the DOM. Place to call data form the server.\n  //   componentDidMount() {\n  // //Ajax Call\n  //     this.setState({data from the server})\n  //   }\n\n\n}\n\nexport default Counter;","map":{"version":3,"sources":["/Users/mateuszmielcarek/Documents/public_html/en/mat/wp-content/reactpress/apps/num-format-err/src/components/counter.jsx"],"names":["React","Component","Counter","render","handleSubmit","state","value","handleChange","getBadgeClasses","formatCount","props","onIncrement","counter","onDecrement","onDelete","id","classes"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;AAEA,MAAMC,OAAN,SAAsBF,KAAK,CAACC,SAA5B,CAAsC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACAE,EAAAA,MAAM,GAAG;AACP;AACA;AAAA;;AACE;AACA;AAAA,gCACE;AAAM,UAAA,QAAQ,EAAE,KAAKC,YAArB;AAAA,kCACE;AAAA,kDAEE;AACE,cAAA,IAAI,EAAC,MADP;AAEE,cAAA,KAAK,EAAE,KAAKC,KAAL,CAAWC,KAFpB;AAGE,cAAA,QAAQ,EAAE,KAAKC;AAHjB;AAAA;AAAA;AAAA;AAAA,oBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eASE;AAAO,YAAA,IAAI,EAAC,QAAZ;AAAqB,YAAA,KAAK,EAAC;AAA3B;AAAA;AAAA;AAAA;AAAA,kBATF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAYE;AAAM,UAAA,SAAS,EAAE,KAAKC,eAAL,EAAjB;AAAA,oBAEG,KAAKC,WAAL;AAFH;AAAA;AAAA;AAAA;AAAA,gBAZF,eAgBE;AAAK,UAAA,SAAS,EAAC,WAAf;AAAA,kCACE;AACE;AACA,YAAA,OAAO,EAAE,MAAM;AACb,mBAAKC,KAAL,CAAWC,WAAX,CAAuB,KAAKD,KAAL,CAAWE,OAAlC,EADa,CAC+B;AAC7C,aAJH;AAKE,YAAA,SAAS,EAAC,qCALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAUE;AACE,YAAA,OAAO,EAAE,MAAM;AACb,mBAAKF,KAAL,CAAWG,WAAX,CAAuB,KAAKH,KAAL,CAAWE,OAAlC;AACD,aAHH;AAIE,YAAA,SAAS,EAAC,gCAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAVF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAhBF,eAmCE;AACE,UAAA,OAAO,EAAE,MAAM,KAAKF,KAAL,CAAWI,QAAX,CAAoB,KAAKJ,KAAL,CAAWE,OAAX,CAAmBG,EAAvC,CADjB,CAC6D;AAC3D;AACA;AACA;AAJF;AAKE,UAAA,SAAS,EAAC,2BALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAnCF,EA4CuE,GA5CvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAFF;AAmDD,GAzGmC,CA2GpC;;;AACAP,EAAAA,eAAe,GAAG;AAChB,QAAIQ,OAAO,GAAG,eAAd;AACAA,IAAAA,OAAO,IAAI,KAAKN,KAAL,CAAWE,OAAX,CAAmBN,KAAnB,KAA6B,CAA7B,GAAiC,SAAjC,GAA6C,SAAxD,CAFgB,CAEmD;;AACnE,WAAOU,OAAP;AACD,GAhHmC,CAkHpC;;;AACAP,EAAAA,WAAW,GAAG;AACZ;AACA,UAAM;AAAEH,MAAAA,KAAK,EAAEA;AAAT,QAAmB,KAAKI,KAAL,CAAWE,OAApC;AACA,WAAON,KAAK,KAAK,CAAV,GAAc,MAAd,GAAuBA,KAA9B,CAHY,CAGyB;AACrC;AACD,GAxHmC,CA0HpC;AACA;AACA;AACA;AACA;AACA;AACA;;;AAhIoC;;AAmItC,eAAeJ,OAAf","sourcesContent":["import React, { Component } from \"react\";\n\nclass Counter extends React.Component {\n  ///////////////////////////////////////////////////////////\n  //[LOCAL STATE OF COMPONENT - WHEN NOT INTENDED TO BE MODIFIED]\n  //   state = { //local state- cannot be updated do \"Reset\" does not work.\n  //     //state includes data that is local or private to the component\n  //     //other components cannot access to that state\n  //     //component may not have state, it may take all the data from props\n  //     value: this.props.counter.value,\n  //     //props includes data that we give to the component\n  //     //props is read-only - we cannot assign to the value of the object\n  //     //to modiufy something we need to reach the state\n\n  //     //!! The component that owns a piece of the state, should be the one modifying it!!\n  //     //!! So, in this case the Counters component owns the state \"counters\" so it should modify it!!\n  //     // Cut, the state is private to the component, so how to modity it with another (Counter) component?\n  //     // Counter component will raise the event\n  //   };\n  ///////////////////////////////////////////////////////////\n  //   //[RENDERING LIST OF COMPONENTS (TAGS)]\n  //   state = {\n  //     tags: [\"tag1\", \"tag2\", \"tag3\"],\n  //   };\n  //     renderTags() {\n  //       if (this.state.tags.length === 0) return <p>There are no tags!</p>;\n  //       return (\n  //         <ul>\n  //           {this.state.tags.map((tag) => (\n  //             <li key={tag}>{tag}</li>\n  //           ))}\n  //         </ul>\n  //       );\n  //     }\n  ///////////////////////////////////////////////////////////\n  //   //[RENDERING LIST OF COMPONENTS (TAGS)]\n  //   constructor() {\n  //     super(); //to have the\n  //     this.handleIncrement = this.handleIncrement.bind(this);\n  //   }\n  //Functions in javaScript are objects so they have objects and methods.\n  //Above is done to get access to the Counter object in function.\n  //We will be able to update \"state\" property.\n  //Solution to bind event handlers to \"This\"\n  //There is another way of doing this:\n  //   handleIncrement() {\n  //     console.log(\"Increment clicked\", this);\n  //   }\n  ///////////////////////////////////////////////////////////\n  //   //[CONTROLLED COMPONENT]\n  //Component is controlled by its parent - no local state should exist!\n  //Same in Counters component.\n\n  // Render method\n  render() {\n    // console.log(\"props\", this.props);\n    return (\n      /* Required so that Babel knows that the single html tag that needs to be rendered (with children inside).*/\n      <div>\n        <form onSubmit={this.handleSubmit}>\n          <label>\n            Imię:\n            <input\n              type=\"text\"\n              value={this.state.value}\n              onChange={this.handleChange}\n            />\n          </label>\n          <input type=\"submit\" value=\"Wyślij\" />\n        </form>\n        <span className={this.getBadgeClasses()}>\n          {/* Could also add style=\"some style\" */}\n          {this.formatCount()}\n        </span>\n        <div className=\"btn-group\">\n          <button\n            //   onClick={() => this.handleIncrement(product)} // passing arguments to event handlers - pass arrow function to event identifier\n            onClick={() => {\n              this.props.onIncrement(this.props.counter); // This is here instead of the local state. Parent controls the component.\n            }}\n            className=\"btn btn-secondary btn-sm col-3 me-2\"\n          >\n            +\n          </button>\n          <button\n            onClick={() => {\n              this.props.onDecrement(this.props.counter);\n            }}\n            className=\"btn btn-secondary btn-sm col-3\"\n          >\n            -\n          </button>\n        </div>\n        <button\n          onClick={() => this.props.onDelete(this.props.counter.id)} //onDelete is a property of Counter component called in Counters component.\n          // Here only the property onDelete of the counter, defined in counters component is called - <raising event handlers>\n          // The reference must be given as an arrow function, as we need to pass an id of the counter to be deleted.\n          // If instead of \"this.props.counter.id\" we would add 1, always counter of id 1 would be deleted.\n          className=\"btn btn-danger btn-sm m-2\"\n        >\n          Delete\n        </button>\n        {/* {this.state.tags.length === 0 && \"please create a new tag!\"} */}{\" \"}\n        {/* Simplified if else statement with &&*/}\n        {/* {this.renderTags()} */}\n      </div>\n    );\n  }\n\n  // Method to change badge classes based on value of the counter.\n  getBadgeClasses() {\n    let classes = \"badge m-2 bg-\";\n    classes += this.props.counter.value === 0 ? \"warning\" : \"primary\"; // If counter value is 0 add \"Warning\", else add \"primary\".\n    return classes;\n  }\n\n  // Method to format counter based on value.\n  formatCount() {\n    // Object destructuring - picking a single property of an object and store it in a const.\n    const { value: value } = this.props.counter;\n    return value === 0 ? \"Zero\" : value; // Instead of plain text \"Zero\" it is also possible to return a JSX expression: <h1>Zero</h1>.\n    // Constant (const) can also store JSX expression. const x = <h1>Zero</h1>\n  }\n\n  ///////////////////////////////////////////////////////////\n  //   //[USAGE OF <componentDidMount>]\n  //   // Called after component is rendered into the DOM. Place to call data form the server.\n  //   componentDidMount() {\n  // //Ajax Call\n  //     this.setState({data from the server})\n  //   }\n}\n\nexport default Counter;\n"]},"metadata":{},"sourceType":"module"}