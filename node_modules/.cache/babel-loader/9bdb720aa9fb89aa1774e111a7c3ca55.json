{"ast":null,"code":"var _jsxFileName = \"/Users/mateuszmielcarek/counter-app/src/components/counter.jsx\";\nimport React, { Component } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Counter extends React.Component {\n  //[LOCAL STATE OF COMPONENT - WHEN NOT INTENDED TO BE MODIFIED]\n  //   state = { //local state- cannot be updated do \"Reset\" does not work.\n  //     //state includes data that is local or private to the component\n  //     //other components cannot access to that state\n  //     //component may not have state, it may take all the data from props\n  //     value: this.props.counter.value,\n  //     //props includes data that we give to the component\n  //     //props is read-only - we cannot assign to the value of the object\n  //     //to modiufy something we need to reach the state\n  //     // tags: [\"tag1\", \"tag2\", \"tag3\"],\n  //     //!! The component that owns a piece of the state, should be the one modifying it!!\n  //     //!! So, in this case the Counters component owns the state \"counters\" so it should modify it!!\n  //     // Cut, the state is private to the component, so how to modity it with another (Counter) component?\n  //     // Counter component will raise the event\n  //   };\n  //   renderTags() {\n  //     if (this.state.tags.length === 0) return <p>There are no tags!</p>;\n  //     return (\n  //       <ul>\n  //         {this.state.tags.map((tag) => (\n  //           <li key={tag}>{tag}</li>\n  //         ))}\n  //       </ul>\n  //     );\n  //   }\n  //   constructor() {\n  //     super(); //to have the\n  //     this.handleIncrement = this.handleIncrement.bind(this);\n  //   }\n  //Functions in javaScript are objects so they have objects and methods.\n  //Above is done to get access to the Counter object in function.\n  //We will be able to update \"state\" property.\n  //Solution to bind event handlers to \"This\"\n  //There is another way of doing this:\n  //   handleIncrement() {\n  //     console.log(\"Increment clicked\", this);\n  //   }\n  //   handleIncrement = (product) => {\n  //     console.log(product);\n  //     // console.log(\"Increment clicked\", this);\n  //     // this.state.count++; // we cannot change value of count directly like this - React will not be aware that it changed\n  //     this.setState({ value: this.state.value + 1 });\n  //   };\n  //using an arrow function is cleaner solution\n  //   doHandleIncrement = () => {\n  //     this.handleIncrement({ id: 1 });\n  //   };\n  render() {\n    // console.log(\"props\", this.props);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: this.getBadgeClasses(),\n        children: this.formatCount()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        //   onClick={() => this.handleIncrement(product)} // passing arguments to event handlers - pass arrow function to event identifier\n        onClick: () => {\n          this.props.onIncrement(this.props.counter);\n        },\n        className: \"btn btn-secondary btn-sm\",\n        children: \"Increment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => this.props.onDelete(this.props.counter.id),\n        className: \"btn btn-danger btn-sm m-2\",\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this);\n  }\n\n  getBadgeClasses() {\n    let classes = \"badge m-2 bg-\";\n    classes += this.props.counter.value === 0 ? \"warning\" : \"primary\";\n    return classes;\n  }\n\n  formatCount() {\n    const {\n      value: value\n    } = this.props.counter;\n    return value === 0 ? \"Zero\" : value;\n  } //   // Called after component is rendered into the DOM. Place to call data form the server.\n  //   componentDidMount() {\n  // //Ajax Call\n  //     this.setState({data from the server})\n  //   }\n\n\n}\n\nexport default Counter;","map":{"version":3,"sources":["/Users/mateuszmielcarek/counter-app/src/components/counter.jsx"],"names":["React","Component","Counter","render","getBadgeClasses","formatCount","props","onIncrement","counter","onDelete","id","classes","value"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;AAEA,MAAMC,OAAN,SAAsBF,KAAK,CAACC,SAA5B,CAAsC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEAE,EAAAA,MAAM,GAAG;AACP;AACA,wBACE;AAAA,8BAGE;AAAM,QAAA,SAAS,EAAE,KAAKC,eAAL,EAAjB;AAAA,kBAA0C,KAAKC,WAAL;AAA1C;AAAA;AAAA;AAAA;AAAA,cAHF,eAIE;AACE;AACA,QAAA,OAAO,EAAE,MAAM;AACb,eAAKC,KAAL,CAAWC,WAAX,CAAuB,KAAKD,KAAL,CAAWE,OAAlC;AACD,SAJH;AAKE,QAAA,SAAS,EAAC,0BALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF,eAaE;AACE,QAAA,OAAO,EAAE,MAAM,KAAKF,KAAL,CAAWG,QAAX,CAAoB,KAAKH,KAAL,CAAWE,OAAX,CAAmBE,EAAvC,CADjB;AAEE,QAAA,SAAS,EAAC,2BAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAbF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAwBD;;AAEDN,EAAAA,eAAe,GAAG;AAChB,QAAIO,OAAO,GAAG,eAAd;AACAA,IAAAA,OAAO,IAAI,KAAKL,KAAL,CAAWE,OAAX,CAAmBI,KAAnB,KAA6B,CAA7B,GAAiC,SAAjC,GAA6C,SAAxD;AACA,WAAOD,OAAP;AACD;;AAEDN,EAAAA,WAAW,GAAG;AACZ,UAAM;AAAEO,MAAAA,KAAK,EAAEA;AAAT,QAAmB,KAAKN,KAAL,CAAWE,OAApC;AACA,WAAOI,KAAK,KAAK,CAAV,GAAc,MAAd,GAAuBA,KAA9B;AACD,GA3FmC,CA6FpC;AACA;AACA;AACA;AACA;;;AAjGoC;;AAoGtC,eAAeV,OAAf","sourcesContent":["import React, { Component } from \"react\";\n\nclass Counter extends React.Component {\n  //[LOCAL STATE OF COMPONENT - WHEN NOT INTENDED TO BE MODIFIED]\n  //   state = { //local state- cannot be updated do \"Reset\" does not work.\n  //     //state includes data that is local or private to the component\n  //     //other components cannot access to that state\n  //     //component may not have state, it may take all the data from props\n  //     value: this.props.counter.value,\n  //     //props includes data that we give to the component\n  //     //props is read-only - we cannot assign to the value of the object\n  //     //to modiufy something we need to reach the state\n  //     // tags: [\"tag1\", \"tag2\", \"tag3\"],\n\n  //     //!! The component that owns a piece of the state, should be the one modifying it!!\n  //     //!! So, in this case the Counters component owns the state \"counters\" so it should modify it!!\n  //     // Cut, the state is private to the component, so how to modity it with another (Counter) component?\n  //     // Counter component will raise the event\n  //   };\n\n  //   renderTags() {\n  //     if (this.state.tags.length === 0) return <p>There are no tags!</p>;\n  //     return (\n  //       <ul>\n  //         {this.state.tags.map((tag) => (\n  //           <li key={tag}>{tag}</li>\n  //         ))}\n  //       </ul>\n  //     );\n  //   }\n\n  //   constructor() {\n  //     super(); //to have the\n  //     this.handleIncrement = this.handleIncrement.bind(this);\n  //   }\n  //Functions in javaScript are objects so they have objects and methods.\n  //Above is done to get access to the Counter object in function.\n  //We will be able to update \"state\" property.\n  //Solution to bind event handlers to \"This\"\n  //There is another way of doing this:\n  //   handleIncrement() {\n  //     console.log(\"Increment clicked\", this);\n  //   }\n\n  //   handleIncrement = (product) => {\n  //     console.log(product);\n  //     // console.log(\"Increment clicked\", this);\n  //     // this.state.count++; // we cannot change value of count directly like this - React will not be aware that it changed\n  //     this.setState({ value: this.state.value + 1 });\n  //   };\n  //using an arrow function is cleaner solution\n\n  //   doHandleIncrement = () => {\n  //     this.handleIncrement({ id: 1 });\n  //   };\n\n  render() {\n    // console.log(\"props\", this.props);\n    return (\n      <div>\n        {/* <h4>{this.props.id}</h4> //this is how to render some complex elements to Counter, the child of the Counters component\n        {this.props.children} */}\n        <span className={this.getBadgeClasses()}>{this.formatCount()}</span>\n        <button\n          //   onClick={() => this.handleIncrement(product)} // passing arguments to event handlers - pass arrow function to event identifier\n          onClick={() => {\n            this.props.onIncrement(this.props.counter);\n          }}\n          className=\"btn btn-secondary btn-sm\"\n        >\n          Increment\n        </button>\n        <button\n          onClick={() => this.props.onDelete(this.props.counter.id)}\n          className=\"btn btn-danger btn-sm m-2\"\n        >\n          Delete\n        </button>\n        {/* {this.state.tags.length === 0 && \"please create a new tag!\"} */}\n        {/* {this.renderTags()} */}\n      </div>\n    );\n  }\n\n  getBadgeClasses() {\n    let classes = \"badge m-2 bg-\";\n    classes += this.props.counter.value === 0 ? \"warning\" : \"primary\";\n    return classes;\n  }\n\n  formatCount() {\n    const { value: value } = this.props.counter;\n    return value === 0 ? \"Zero\" : value;\n  }\n\n  //   // Called after component is rendered into the DOM. Place to call data form the server.\n  //   componentDidMount() {\n  // //Ajax Call\n  //     this.setState({data from the server})\n  //   }\n}\n\nexport default Counter;\n"]},"metadata":{},"sourceType":"module"}