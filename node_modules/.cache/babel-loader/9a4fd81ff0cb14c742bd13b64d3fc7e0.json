{"ast":null,"code":"var _jsxFileName = \"/Users/mateuszmielcarek/Documents/public_html/en/mat/wp-content/reactpress/apps/num-format-err/src/components/counter.jsx\";\nimport React, { Component } from \"react\";\nimport Selector from \"./selector\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Counter extends React.Component {\n  ///////////////////////////////////////////////////////////\n  //[LOCAL STATE OF COMPONENT - WHEN NOT INTENDED TO BE MODIFIED]\n  //   state = { //local state- cannot be updated do \"Reset\" does not work.\n  //     //state includes data that is local or private to the component\n  //     //other components cannot access to that state\n  //     //component may not have state, it may take all the data from props\n  //     value: this.props.counter.value,\n  //     //props includes data that we give to the component\n  //     //props is read-only - we cannot assign to the value of the object\n  //     //to modiufy something we need to reach the state\n  //     //!! The component that owns a piece of the state, should be the one modifying it!!\n  //     //!! So, in this case the Counters component owns the state \"counters\" so it should modify it!!\n  //     // Cut, the state is private to the component, so how to modity it with another (Counter) component?\n  //     // Counter component will raise the event\n  //   };\n  ///////////////////////////////////////////////////////////\n  //   //[RENDERING LIST OF COMPONENTS (TAGS)]\n  //   state = {\n  //     tags: [\"tag1\", \"tag2\", \"tag3\"],\n  //   };\n  //     renderTags() {\n  //       if (this.state.tags.length === 0) return <p>There are no tags!</p>;\n  //       return (\n  //         <ul>\n  //           {this.state.tags.map((tag) => (\n  //             <li key={tag}>{tag}</li>\n  //           ))}\n  //         </ul>\n  //       );\n  //     }\n  ///////////////////////////////////////////////////////////\n  //   //[RENDERING LIST OF COMPONENTS (TAGS)]\n  //   constructor() {\n  //     super(); //to have the\n  //     this.handleIncrement = this.handleIncrement.bind(this);\n  //   }\n  //Functions in javaScript are objects so they have objects and methods.\n  //Above is done to get access to the Counter object in function.\n  //We will be able to update \"state\" property.\n  //Solution to bind event handlers to \"This\"\n  //There is another way of doing this:\n  //   handleIncrement() {\n  //     console.log(\"Increment clicked\", this);\n  //   }\n  ///////////////////////////////////////////////////////////\n  //   //[CONTROLLED COMPONENT]\n  //Component is controlled by its parent - no local state should exist!\n  //Same in Counters component.\n  //onSubmit={this.handleSubmit}\n  // Render method\n  render() {\n    return (\n      /*#__PURE__*/\n      // <div className=\"Container\">\n      // <div className=\"row\">\n      _jsxDEV(\"div\", {\n        className: \"col-sm-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"form\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Number to format:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"1.23E+3 or 1230\",\n              class: \"form-control\" // value={this.state.value}\n              // onChange={this.handleChange}\n\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n              className: \"form-text text-muted\",\n              children: \"Use dot [.] or comma [,] as a decimal separator.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Formatted number:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              class: \"form-control\" // value={this.state.value}\n              // onChange={this.handleChange}\n              ,\n              readOnly: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.props.onDelete(this.props.counter.id) //onDelete is a property of Counter component called in Counters component.\n          // Here only the property onDelete of the counter, defined in counters component is called - <raising event handlers>\n          // The reference must be given as an arrow function, as we need to pass an id of the counter to be deleted.\n          // If instead of \"this.props.counter.id\" we would add 1, always counter of id 1 would be deleted.\n          ,\n          className: \"btn btn-danger m-2\",\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 7\n      }, this)\n    );\n  } // Method to change button classes on click to make it a selector.\n\n\n  changeButtonClass() {\n    let classes = \"btn btn-sm btn-\";\n    classes += this.props.counter.value === 0 ? \"primary\" : \"secondary\"; // If counter value is 0 add \"Warning\", else add \"primary\".\n\n    return classes;\n  } // Method to format counter based on value.\n\n\n  formatCount() {\n    // Object destructuring - picking a single property of an object and store it in a const.\n    const {\n      value: value\n    } = this.props.counter;\n    return value === 0 ? \"Zero\" : value; // Instead of plain text \"Zero\" it is also possible to return a JSX expression: <h1>Zero</h1>.\n    // Constant (const) can also store JSX expression. const x = <h1>Zero</h1>\n  } ///////////////////////////////////////////////////////////\n  //   //[USAGE OF <componentDidMount>]\n  //   // Called after component is rendered into the DOM. Place to call data form the server.\n  //   componentDidMount() {\n  // //Ajax Call\n  //     this.setState({data from the server})\n  //   }\n\n\n}\n\nexport default Counter;","map":{"version":3,"sources":["/Users/mateuszmielcarek/Documents/public_html/en/mat/wp-content/reactpress/apps/num-format-err/src/components/counter.jsx"],"names":["React","Component","Selector","Counter","render","props","onDelete","counter","id","changeButtonClass","classes","value","formatCount"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,YAArB;;;AAEA,MAAMC,OAAN,SAAsBH,KAAK,CAACC,SAA5B,CAAsC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACAG,EAAAA,MAAM,GAAG;AACP;AAAA;AACE;AACA;AACA;AAAK,QAAA,SAAS,EAAC,UAAf;AAAA,gCACE;AAAA,kCACE;AAAK,YAAA,SAAS,EAAC,YAAf;AAAA,oCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE;AACE,cAAA,IAAI,EAAC,MADP;AAEE,cAAA,WAAW,EAAC,iBAFd;AAGE,cAAA,KAAK,EAAC,cAHR,CAIE;AACA;;AALF;AAAA;AAAA;AAAA;AAAA,oBAFF,eASE;AAAO,cAAA,SAAS,EAAC,sBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBATF;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAcE;AAAK,YAAA,SAAS,EAAC,YAAf;AAAA,oCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE;AACE,cAAA,IAAI,EAAC,MADP;AAEE,cAAA,KAAK,EAAC,cAFR,CAGE;AACA;AAJF;AAKE,cAAA,QAAQ;AALV;AAAA;AAAA;AAAA;AAAA,oBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,kBAdF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eA0BE;AACE,UAAA,OAAO,EAAE,MAAM,KAAKC,KAAL,CAAWC,QAAX,CAAoB,KAAKD,KAAL,CAAWE,OAAX,CAAmBC,EAAvC,CADjB,CAC6D;AAC3D;AACA;AACA;AAJF;AAKE,UAAA,SAAS,EAAC,oBALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBA1BF;AAAA;AAAA;AAAA;AAAA;AAAA;AAHF;AAwCD,GA9FmC,CAgGpC;;;AACAC,EAAAA,iBAAiB,GAAG;AAClB,QAAIC,OAAO,GAAG,iBAAd;AACAA,IAAAA,OAAO,IAAI,KAAKL,KAAL,CAAWE,OAAX,CAAmBI,KAAnB,KAA6B,CAA7B,GAAiC,SAAjC,GAA6C,WAAxD,CAFkB,CAEmD;;AACrE,WAAOD,OAAP;AACD,GArGmC,CAuGpC;;;AACAE,EAAAA,WAAW,GAAG;AACZ;AACA,UAAM;AAAED,MAAAA,KAAK,EAAEA;AAAT,QAAmB,KAAKN,KAAL,CAAWE,OAApC;AACA,WAAOI,KAAK,KAAK,CAAV,GAAc,MAAd,GAAuBA,KAA9B,CAHY,CAGyB;AACrC;AACD,GA7GmC,CA+GpC;AACA;AACA;AACA;AACA;AACA;AACA;;;AArHoC;;AAwHtC,eAAeR,OAAf","sourcesContent":["import React, { Component } from \"react\";\nimport Selector from \"./selector\";\n\nclass Counter extends React.Component {\n  ///////////////////////////////////////////////////////////\n  //[LOCAL STATE OF COMPONENT - WHEN NOT INTENDED TO BE MODIFIED]\n  //   state = { //local state- cannot be updated do \"Reset\" does not work.\n  //     //state includes data that is local or private to the component\n  //     //other components cannot access to that state\n  //     //component may not have state, it may take all the data from props\n  //     value: this.props.counter.value,\n  //     //props includes data that we give to the component\n  //     //props is read-only - we cannot assign to the value of the object\n  //     //to modiufy something we need to reach the state\n\n  //     //!! The component that owns a piece of the state, should be the one modifying it!!\n  //     //!! So, in this case the Counters component owns the state \"counters\" so it should modify it!!\n  //     // Cut, the state is private to the component, so how to modity it with another (Counter) component?\n  //     // Counter component will raise the event\n  //   };\n  ///////////////////////////////////////////////////////////\n  //   //[RENDERING LIST OF COMPONENTS (TAGS)]\n  //   state = {\n  //     tags: [\"tag1\", \"tag2\", \"tag3\"],\n  //   };\n  //     renderTags() {\n  //       if (this.state.tags.length === 0) return <p>There are no tags!</p>;\n  //       return (\n  //         <ul>\n  //           {this.state.tags.map((tag) => (\n  //             <li key={tag}>{tag}</li>\n  //           ))}\n  //         </ul>\n  //       );\n  //     }\n  ///////////////////////////////////////////////////////////\n  //   //[RENDERING LIST OF COMPONENTS (TAGS)]\n  //   constructor() {\n  //     super(); //to have the\n  //     this.handleIncrement = this.handleIncrement.bind(this);\n  //   }\n  //Functions in javaScript are objects so they have objects and methods.\n  //Above is done to get access to the Counter object in function.\n  //We will be able to update \"state\" property.\n  //Solution to bind event handlers to \"This\"\n  //There is another way of doing this:\n  //   handleIncrement() {\n  //     console.log(\"Increment clicked\", this);\n  //   }\n  ///////////////////////////////////////////////////////////\n  //   //[CONTROLLED COMPONENT]\n  //Component is controlled by its parent - no local state should exist!\n  //Same in Counters component.\n\n  //onSubmit={this.handleSubmit}\n  // Render method\n  render() {\n    return (\n      // <div className=\"Container\">\n      // <div className=\"row\">\n      <div className=\"col-sm-4\">\n        <form>\n          <div className=\"form-group\">\n            <label>Number to format:</label>\n            <input\n              type=\"text\"\n              placeholder=\"1.23E+3 or 1230\"\n              class=\"form-control\"\n              // value={this.state.value}\n              // onChange={this.handleChange}\n            />\n            <small className=\"form-text text-muted\">\n              Use dot [.] or comma [,] as a decimal separator.\n            </small>\n          </div>\n          <div className=\"form-group\">\n            <label>Formatted number:</label>\n            <input\n              type=\"text\"\n              class=\"form-control\"\n              // value={this.state.value}\n              // onChange={this.handleChange}\n              readOnly\n            />\n          </div>\n        </form>\n        <button\n          onClick={() => this.props.onDelete(this.props.counter.id)} //onDelete is a property of Counter component called in Counters component.\n          // Here only the property onDelete of the counter, defined in counters component is called - <raising event handlers>\n          // The reference must be given as an arrow function, as we need to pass an id of the counter to be deleted.\n          // If instead of \"this.props.counter.id\" we would add 1, always counter of id 1 would be deleted.\n          className=\"btn btn-danger m-2\"\n        >\n          Delete\n        </button>\n      </div>\n    );\n  }\n\n  // Method to change button classes on click to make it a selector.\n  changeButtonClass() {\n    let classes = \"btn btn-sm btn-\";\n    classes += this.props.counter.value === 0 ? \"primary\" : \"secondary\"; // If counter value is 0 add \"Warning\", else add \"primary\".\n    return classes;\n  }\n\n  // Method to format counter based on value.\n  formatCount() {\n    // Object destructuring - picking a single property of an object and store it in a const.\n    const { value: value } = this.props.counter;\n    return value === 0 ? \"Zero\" : value; // Instead of plain text \"Zero\" it is also possible to return a JSX expression: <h1>Zero</h1>.\n    // Constant (const) can also store JSX expression. const x = <h1>Zero</h1>\n  }\n\n  ///////////////////////////////////////////////////////////\n  //   //[USAGE OF <componentDidMount>]\n  //   // Called after component is rendered into the DOM. Place to call data form the server.\n  //   componentDidMount() {\n  // //Ajax Call\n  //     this.setState({data from the server})\n  //   }\n}\n\nexport default Counter;\n"]},"metadata":{},"sourceType":"module"}