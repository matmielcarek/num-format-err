{"version":3,"sources":["components/header.jsx","components/selector.jsx","components/prepender.jsx","components/numform.jsx","components/calculator.jsx","App.js","reportWebVitals.js","index.js"],"names":["Header","className","React","Component","Selector","onChangeValue","bind","event","this","props","onSelectionChange","target","id","selector","lab","opt1","opt2","onChange","type","name","autoComplete","defaultChecked","htmlFor","Prepender","prep","NumForm","handleChange","onInputChange","value","form","plHold","mess","readonly","inp","placeholder","readOnly","ConstructString","val","err","errType","sign","notation","isNaN","parseFloat","absErr","num","t","Math","floor","log10","ord","sig","console","log","errStrSci","valSci","errSci","valStr","valStrSci","errStr","round","toFixed","Infinity","rnSig","errDigits","Calculator","handleValChange","setState","handleErrChange","handleErrTypeChange","handleSignChange","handleNotationChange","handleResultChange","str","state","selectors","forms","href","onClick","handleCalc","classes","counter","App","handleDelete","counterId","counters","filter","c","Fragment","onDelete","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c84d2869.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <div>\n        <header>\n          <h1 className=\"title is-spaced has-text-centered\">\n            Number formatter\n          </h1>{\" \"}\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from \"react\";\n\nclass Selector extends React.Component {\n  constructor() {\n    super();\n    this.onChangeValue = this.onChangeValue.bind(this);\n  }\n\n  onChangeValue(event) {\n    // console.log(event.target.id);\n    this.props.onSelectionChange(event.target.id);\n  }\n\n  render() {\n    const { id, lab, opt1, opt2 } = this.props.selector;\n    // console.log(lab + id);\n    return (\n      <div>\n        <span>{lab} </span>\n        {/* <div className=\"w-100 btn-group btn-block\" onChange={() => {\n          this.props.onErrTypeChange(this.props.id); // This is here instead of the local state. Parent controls the component.\n        }}> */}\n        <div className=\"w-100 btn-group btn-block\" onChange={this.onChangeValue}>\n          <input\n            type=\"radio\"\n            name={lab}\n            className=\"btn-check\"\n            id={opt1}\n            autoComplete=\"off\"\n            defaultChecked\n          />\n          <label className=\"btn btn-block btn-outline-primary\" htmlFor={opt1}>\n            {opt1}\n          </label>\n          <input\n            type=\"radio\"\n            name={lab}\n            className=\"btn-check\"\n            id={opt2}\n            autoComplete=\"off\"\n          />\n          <label className=\"btn btn-block btn-outline-primary\" htmlFor={opt2}>\n            {opt2}\n          </label>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Selector;\n","import React, { Component } from \"react\";\n\nclass Prepender extends React.Component {\n  render() {\n    return (\n      <div className=\"input-group-prepend\">\n        <span className=\"input-group-text\">{this.props.prep}</span>\n      </div>\n    );\n  }\n}\n\nexport default Prepender;\n","import React, { Component } from \"react\";\nimport Prepender from \"./prepender\";\n\nclass NumForm extends React.Component {\n  constructor(props) {\n    super(props);\n    // this.state = { value: \"\" };\n    this.handleChange = this.handleChange.bind(this);// This binding is necessary to make `this` work in the callback\n  }\n  //Functions in javaScript are objects so they have objects and methods.\n  //Above is done to get access to the Counter object in function.\n  //We will be able to update \"state\" property.\n  //Solution to bind event handlers to \"This\"\n  //There is another way of doing this:\n  //   handleIncrement() {\n  //     console.log(\"Increment clicked\", this);\n  //   }\n  ///////////////////////////////////////////////////////////\n  handleChange(event) {\n    this.props.onInputChange(event.target.value);\n  }\n\n  render() {\n    const { id, lab, plHold, prep, mess, readonly } = this.props.form;\n    const inp = this.props.inp;\n\n    return (\n      <form>\n        <label className=\"w-100\">{lab}</label>\n        <div className=\"input-group\">\n          {prep !== \"\" && <Prepender prep={prep} />}\n          <input\n            type=\"text\"\n            placeholder={plHold}\n            className=\"form-control\"\n            value={inp}\n            onChange={this.handleChange}\n            readOnly={readonly}\n          />\n          {/* <input type=\"submit\" value=\"Wyślij\" /> */}\n        </div>\n        <small className=\"form-text text-muted\">{mess}</small>\n      </form>\n    );\n  }\n}\n\nexport default NumForm;\n","import React, { Component } from \"react\";\nimport Selector from \"./selector\";\nimport NumForm from \"./numform\";\n\nfunction rnSig(val, absErr) { //round value to appropriate count of significant digits based on absolute error\n  const t = Math.floor(Math.log10(0.5 / absErr)); //calc number of fractional significant digits based on absolute error\n  const ord = Math.floor(Math.log10(val)) //calc order of magnitude of the number\n  const sig = ord + t + 1; //calc number of significant digits by adding t to order of magnitude of the number\n  console.log(sig)\n  //initiate variables\n  let valSci = val,\n    errSci = absErr,\n    valStr = val,\n    valStrSci = val,\n    errStr = absErr,\n    errStrSci = absErr\n  //calculate base of scientific notation\n  valSci = (valSci / (10 ** ord))\n  errSci = (errSci / (10 ** ord))\n  //rounded value in decimal notation\n  valStr = Math.round(valStr / (10 ** (-t))) * (10 ** (-t));\n  //rounded value in scientific notation\n  valStrSci = Math.round(valSci / (10 ** (-t - ord))) * (10 ** (-t - ord));\n  valStrSci = valStrSci.toFixed(t + ord + 1);\n  //rounded error in decimal notation\n  errStr = Math.round(errStr / (10 ** -(t + 1))) * (10 ** -(t + 1));\n  //rounded error in scientific notation\n  errStrSci = errSci.toFixed(t + ord + 1);\n  //where abs. error in decimal range, add \"0\" to match decimal places of the error\n  if (t >= 0) { // where\n    valStr = valStr.toFixed(t + 1);\n    errStr = errStr.toFixed(t + 1);\n  }\n  //return object with formatted values\n  return {\n    valStr: valStr,\n    errStr: errStr,\n    valStrSci: valStrSci,\n    errStrSci: errStrSci,\n    ord: ord === Infinity ? 0 : ord\n  };\n}\n\nfunction ConstructString(val, err, errType, sign, notation) {\n  //check if inputs can be read as numbers\n  if (isNaN(parseFloat(val)) || isNaN(parseFloat(err))) {\n    return \"Please specify number and error: i.e. 1234 and 0.04.\"\n  }\n\n  //convert user ipnut to float\n  val = parseFloat(val)\n  err = parseFloat(err)\n  let absErr = 0,\n    resString = \"\";\n\n  //calculate relative and absolute error\n  if (errType === \"Rel.\") {\n    absErr = val * err;\n  }\n  else {\n    absErr = err;\n  }\n\n  //check for absErr greater than a number and if absErr is not 0\n  if (absErr > 0 && absErr < val) {\n    //read data from object returned by function rnSig\n    const num = rnSig(val, absErr);\n    const\n      valStr = num.valStr,\n      valStrSci = num.valStrSci,\n      errStr = num.errStr,\n      errStrSci = num.errStrSci,\n      errDigits = (errStr / (10 ** Math.floor(Math.log10(errStr)))).toFixed(0), //absolute error in form of string of least significant digits\n      ord = num.ord\n\n    //construct number representation based on user-selected settings\n    if (sign === \"±\") {\n      if (notation === \"Sci.\") {\n\n        resString = \"(\" + valStrSci + sign + errStrSci + \")\" + \"e\" + (ord >= 0 ? \"+\" : \"-\") + ord\n      }\n      else {\n        resString = valStr + sign + errStr\n      }\n    }\n    else {\n      if (notation === \"Sci.\") {\n        resString = valStrSci + \"(\" + errDigits + \")\" + \"e\" + (ord >= 0 ? \"+\" : \"-\") + ord\n      }\n      else {\n        resString = valStr + \"(\" + errDigits + \")\"\n      }\n    }\n    return resString\n  }\n  else {\n    return \"Number shall be greater than its absolute error!\"\n  }\n}\n\nclass Calculator extends React.Component {\n  constructor(props) {\n    super(props);\n    // this.handleValChange = this.handleValChange.bind(this); // used arrow functions instead\n    // this.handleErrChange = this.handleErrChange.bind(this); // used arrow functions instead\n    this.state = {\n      val: \"\", err: \"\", errType: \"Rel.\", notation: \"Std.\", sign: \"±\",\n      selectors: [\n        { id: 1, lab: \"Error type:\", opt1: \"Rel.\", opt2: \"Abs.\" },\n        { id: 2, lab: \"Number notation:\", opt1: \"Std.\", opt2: \"Sci.\" },\n        {\n          id: 3,\n          lab: \"Error notation:\",\n          opt1: \"±\",\n          opt2: \"()\",\n        },\n      ],\n      forms: [\n        {\n          id: 1,\n          lab: \"Number to format:\",\n          plHold: \"i.e. 1.23E+3 or 1230\",\n          prep: \"\",\n          mess: \"Use dot [.] or comma [,] as a decimal separator.\",\n          readonly: 0,\n        },\n        { id: 2, lab: \"Error:\", plHold: \"i.e. 3E-2 or 0.03\", prep: \"±\", mess: \"\", readonly: 0, },\n        { id: 3, lab: \"Formatted number:\", plHold: \"\", prep: \"\", mess: \"\", readonly: 1, }, //inValue: \"\",\n      ],\n    };\n  }\n\n  handleValChange = (val) => {\n    this.setState({ val });\n    // this.setState({ str });\n  }\n\n  handleErrChange = (err) => {\n    this.setState({ err });\n    // this.setState({ str });\n  }\n\n  handleErrTypeChange = (errType) => {\n    this.setState({ errType });\n  }\n\n  handleSignChange = (sign) => {\n    this.setState({ sign });\n  }\n\n  handleNotationChange = (notation) => {\n    this.setState({ notation });\n  }\n\n  handleResultChange = (str) => {\n    this.setState({ str });\n  }\n\n  // Render method\n  render() {\n    const val = this.state.val;\n    const err = this.state.err;\n    const errType = this.state.errType;\n    const sign = this.state.sign;\n    const notation = this.state.notation;\n    const str = ConstructString(val, err, errType, sign, notation)\n    return (\n      //IMPORTANT! Bulma's grid system is used to compy with Wordpress theme. Bootstrap is used for styling components.\n      <div>\n        <div className=\"columns\">\n          <div className=\"column is-9 has-text-justified is-hidden-mobile\">\n            <p>\n              This tool formats a given number so that it is rounded to\n              an appropriate number of significant digits based on the given\n              uncertainty of the value. If you are interested in the formal\n              and mathematical background, please visit the <a href=\"https://mmielcarek.com/en/mat/rounding_numbers\"> blog.</a>\n            </p>\n          </div>\n          <div className=\"column has-text-right\">\n            <button\n              onClick={this.handleCalc} //onDelete is a property of Counter component called in Counters component.\n              // Here only the property onDelete of the counter, defined in counters component is called - <raising event handlers>\n              // The reference must be given as an arrow function, as we need to pass an id of the counter to be deleted.\n              // If instead of \"this.props.counter.id\" we would add 1, always counter of id 1 would be deleted.\n              className=\"btn btn-warning w-100\"\n            >\n              Clear input\n            </button>\n          </div>\n        </div>\n        <div className=\"columns\">\n          <div className=\"column is-6\">\n            {/*---------------------------------------------------------------------INPUT - NUMBER*/}\n            <NumForm key={0} form={this.state.forms[0]} onInputChange={this.handleValChange} inp={val}></NumForm>\n          </div>\n          {/*---------------------------------------------------------------------INPUT - ERROR*/}\n          <div className=\"column\">\n            <NumForm key={1} form={this.state.forms[1]} onInputChange={this.handleErrChange} inp={err}></NumForm>\n          </div>\n          <div className=\"column\">\n            {/*---------------------------------------------------------------------SELECTOR - ERR*/}\n            <Selector key={0} selector={this.state.selectors[0]} onSelectionChange={this.handleErrTypeChange}></Selector>\n          </div>\n        </div>\n        <div className=\"columns\">\n          {/*---------------------------------------------------------------------INPUT - FORM. NUMBER*/}\n          <div className=\"column is-6\">\n            <NumForm key={2} form={this.state.forms[2]} onSelectionChange={this.handleResultChange} inp={str}></NumForm>\n          </div>\n          <div className=\"column\">\n            {/*---------------------------------------------------------------------SELECTOR - NUM NOTATION*/}\n            <Selector key={1} selector={this.state.selectors[1]} onSelectionChange={this.handleNotationChange}></Selector>\n            {/* {this.state.selectors.map((selector) => (\n              <Selector key={selector.id} selector={selector}></Selector>\n            ))} */}\n          </div>\n          <div className=\"column\">\n            {/*---------------------------------------------------------------------SELECTORS - ERR NOTATION*/}\n            <Selector key={2} selector={this.state.selectors[2]} onSelectionChange={this.handleSignChange}></Selector>\n          </div>\n        </div>\n        {/* <div className=\"columns\">\n          <div className=\"column is-6\">\n            <BoilingVerdict\n              celsius={parseFloat(val)} />\n          </div>\n        </div> */}\n\n        {/*---------------------------------------------------------------------DELETE BTN*/}\n        <hr className=\"w-100\" />\n      </div >\n    );\n  }\n\n  // Method to change button classes on click to make it a selector.\n  changeButtonClass() {\n    let classes = \"btn btn-sm btn-\";\n    classes += this.props.counter.value === 0 ? \"primary\" : \"secondary\"; // If counter value is 0 add \"Warning\", else add \"primary\".\n    return classes;\n  }\n\n  // Method to format counter based on value.\n  formatCount() {\n    // Object destructuring - picking a single property of an object and store it in a const.\n    const { value: value } = this.props.counter;\n    return value === 0 ? \"Zero\" : value; // Instead of plain text \"Zero\" it is also possible to return a JSX expression: <h1>Zero</h1>.\n    // Constant (const) can also store JSX expression. const x = <h1>Zero</h1>\n  }\n\n  ///////////////////////////////////////////////////////////\n  //   //[USAGE OF <componentDidMount>]\n  //   // Called after component is rendered into the DOM. Place to call data form the server.\n  //   componentDidMount() {\n  // //Ajax Call\n  //     this.setState({data from the server})\n  //   }\n}\n\nexport default Calculator;\n","import React, { Component } from \"react\";\nimport Header from \"./components/header\";\nimport \"./App.css\";\n// import CalculatorList from \"./components/calculator_list\";\nimport Calculator from \"./components/calculator\";\n\n//Now we want to exchange data between two child components: Counters and Navbar (to display number of items)\n// There is no parent-child relationship between the two\n//We need to raise the state of Counters component up to App\n\nclass App extends Component {\n  handleDelete = (counterId) => {\n    // console.log(\"Delete event handled.\", counterId);\n    const counters = this.state.counters.filter((c) => c.id !== counterId); //We do not remove the counter from state - we only make a new array after the event.\n    this.setState({ counters });\n  };\n\n  // handleReset = () => {\n  //   const counters = this.state.counters.map((c) => {\n  //     c.value = 0;\n  //     return c;\n  //   });\n  //   this.setState({ counters });\n  // };\n\n  render() {\n    return (\n      <React.Fragment>\n        {/* <NavBar totalCounters={this.state.counters.filter(c => c.value>0).length}></NavBar> */}\n\n        {/* <main className=\"container\">\n          \n        </main> */}\n        <main id=\"primary\" className=\"site-main\">\n          <section className=\"section\">\n            <div className=\"container is-max-widescreen py-4 \">\n              <div className=\"columns is-multiline is-centered\">\n                <div className=\"column is-10-tablet is-9-desktop\">\n                  <article\n                    id=\"post-11\"\n                    className=\"post-11 page type-page status-publish hentry\"\n                  >\n                    <Header />\n\n                    <div className=\"entry-content content mt-6\">\n                      <Calculator onDelete={this.handleDelete} />\n                    </div>\n                  </article>{\" \"}\n                </div>\n              </div>\n            </div>\n          </section>\n        </main>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'; // Object imported from React module\nimport ReactDOM from 'react-dom'; // Object imported from React module\n// import './index.css'; // Import basic css\nimport App from './App'; // Import main (root) component\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css'; // Importing bootstrap css\nimport 'bulma/css/bulma.css'; // Importing bootstrap css\n\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n//[INTRO]\n\n// Base of React library are COMPONENTS - separate pieces of user interface - reusable, independent, isolated.\n// App - root component, then child components.\n// React is only a library, not framework as Angular. It only renders the elements, but no ready components are available.\n// One still need to use bootstrap or other framework to create UI.\n\n//[COMPONENT]\n\n// Component is a JavaScript class that has some STATE and RENDER METHOD.\n// State is data that we want to display when the component is rendered.\n// Render method derscribes what the UI should look like. Output of the render method is \"virtual\" DOM - lightweight, in memory, cheap to create.\n// React compares virtual DOM with old version of the virtual DOM and changes only the DOM elements that were changed.\n// In components we use JSX, that is compiled by Babel to plain js (React) code.\n\n//[START]\n\n// To create basic React app - in directory: <create-react-app app-name> - it includes:\n//-> Development Server\n//-> Webpack\n//-> Babel - JS compiler - from JSX (JavaScript XML) to plain JS\n//-> Other tools\n// To start the server: <npm start>\n\n//[SHORTCUTS]\n\n//->imrc - import react component\n//->cc - create class\n\n//[THIS]\n\n// \"This\" behaves differently, depending on where it is called it can reference different objects.\n// If \"This\" is called as part of a method in an object, \"This\" will return reference to that object.\n// If function is called as standalone function, without object reference, \"This\" by default returns reference to window object.\n\n//[RAISING EVENTS]\n\n// The component that owns a piece od the state, should be the one modifying it.\n// List of counters is part of counters component. Adding and removin shall be done by counters component.\n// But, the state is private to the component! So, Counter shall raise the event and counters component will handle this event.\n// Pass a reference to a method owned by counters component in the counter component via props.\n// In Counters component, where we render counter, we add a prop (event) (i.e. \"onDelete={this.handleDelete)\".\n// In Counter component we refer to a prop: \"this.props.onDelete\".\n"],"sourceRoot":""}